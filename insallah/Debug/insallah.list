
insallah.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024dc  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002688  08002688  00012688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002698  08002698  00012698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080026a0  080026a0  000126a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080026a4  080026a4  000126a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000002c  20000000  080026a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002002c  2**0
                  CONTENTS
  8 .bss          00000080  2000002c  2000002c  0002002c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200000ac  200000ac  0002002c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00007c98  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000015a2  00000000  00000000  00027cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000730  00000000  00000000  00029298  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000668  00000000  00000000  000299c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000034ca  00000000  00000000  0002a030  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000282a  00000000  00000000  0002d4fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0002fd24  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001b98  00000000  00000000  0002fda0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000002c 	.word	0x2000002c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002670 	.word	0x08002670

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000030 	.word	0x20000030
 80001e8:	08002670 	.word	0x08002670

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b97a 	b.w	80004f8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	468c      	mov	ip, r1
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	9e08      	ldr	r6, [sp, #32]
 8000228:	2b00      	cmp	r3, #0
 800022a:	d151      	bne.n	80002d0 <__udivmoddi4+0xb4>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d96d      	bls.n	800030e <__udivmoddi4+0xf2>
 8000232:	fab2 fe82 	clz	lr, r2
 8000236:	f1be 0f00 	cmp.w	lr, #0
 800023a:	d00b      	beq.n	8000254 <__udivmoddi4+0x38>
 800023c:	f1ce 0c20 	rsb	ip, lr, #32
 8000240:	fa01 f50e 	lsl.w	r5, r1, lr
 8000244:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000248:	fa02 f70e 	lsl.w	r7, r2, lr
 800024c:	ea4c 0c05 	orr.w	ip, ip, r5
 8000250:	fa00 f40e 	lsl.w	r4, r0, lr
 8000254:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000258:	0c25      	lsrs	r5, r4, #16
 800025a:	fbbc f8fa 	udiv	r8, ip, sl
 800025e:	fa1f f987 	uxth.w	r9, r7
 8000262:	fb0a cc18 	mls	ip, sl, r8, ip
 8000266:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800026a:	fb08 f309 	mul.w	r3, r8, r9
 800026e:	42ab      	cmp	r3, r5
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x6c>
 8000272:	19ed      	adds	r5, r5, r7
 8000274:	f108 32ff 	add.w	r2, r8, #4294967295
 8000278:	f080 8123 	bcs.w	80004c2 <__udivmoddi4+0x2a6>
 800027c:	42ab      	cmp	r3, r5
 800027e:	f240 8120 	bls.w	80004c2 <__udivmoddi4+0x2a6>
 8000282:	f1a8 0802 	sub.w	r8, r8, #2
 8000286:	443d      	add	r5, r7
 8000288:	1aed      	subs	r5, r5, r3
 800028a:	b2a4      	uxth	r4, r4
 800028c:	fbb5 f0fa 	udiv	r0, r5, sl
 8000290:	fb0a 5510 	mls	r5, sl, r0, r5
 8000294:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000298:	fb00 f909 	mul.w	r9, r0, r9
 800029c:	45a1      	cmp	r9, r4
 800029e:	d909      	bls.n	80002b4 <__udivmoddi4+0x98>
 80002a0:	19e4      	adds	r4, r4, r7
 80002a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a6:	f080 810a 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80002aa:	45a1      	cmp	r9, r4
 80002ac:	f240 8107 	bls.w	80004be <__udivmoddi4+0x2a2>
 80002b0:	3802      	subs	r0, #2
 80002b2:	443c      	add	r4, r7
 80002b4:	eba4 0409 	sub.w	r4, r4, r9
 80002b8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002bc:	2100      	movs	r1, #0
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d061      	beq.n	8000386 <__udivmoddi4+0x16a>
 80002c2:	fa24 f40e 	lsr.w	r4, r4, lr
 80002c6:	2300      	movs	r3, #0
 80002c8:	6034      	str	r4, [r6, #0]
 80002ca:	6073      	str	r3, [r6, #4]
 80002cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xc8>
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d054      	beq.n	8000382 <__udivmoddi4+0x166>
 80002d8:	2100      	movs	r1, #0
 80002da:	e886 0021 	stmia.w	r6, {r0, r5}
 80002de:	4608      	mov	r0, r1
 80002e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e4:	fab3 f183 	clz	r1, r3
 80002e8:	2900      	cmp	r1, #0
 80002ea:	f040 808e 	bne.w	800040a <__udivmoddi4+0x1ee>
 80002ee:	42ab      	cmp	r3, r5
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xdc>
 80002f2:	4282      	cmp	r2, r0
 80002f4:	f200 80fa 	bhi.w	80004ec <__udivmoddi4+0x2d0>
 80002f8:	1a84      	subs	r4, r0, r2
 80002fa:	eb65 0503 	sbc.w	r5, r5, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	46ac      	mov	ip, r5
 8000302:	2e00      	cmp	r6, #0
 8000304:	d03f      	beq.n	8000386 <__udivmoddi4+0x16a>
 8000306:	e886 1010 	stmia.w	r6, {r4, ip}
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b912      	cbnz	r2, 8000316 <__udivmoddi4+0xfa>
 8000310:	2701      	movs	r7, #1
 8000312:	fbb7 f7f2 	udiv	r7, r7, r2
 8000316:	fab7 fe87 	clz	lr, r7
 800031a:	f1be 0f00 	cmp.w	lr, #0
 800031e:	d134      	bne.n	800038a <__udivmoddi4+0x16e>
 8000320:	1beb      	subs	r3, r5, r7
 8000322:	0c3a      	lsrs	r2, r7, #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	2101      	movs	r1, #1
 800032a:	fbb3 f8f2 	udiv	r8, r3, r2
 800032e:	0c25      	lsrs	r5, r4, #16
 8000330:	fb02 3318 	mls	r3, r2, r8, r3
 8000334:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000338:	fb0c f308 	mul.w	r3, ip, r8
 800033c:	42ab      	cmp	r3, r5
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x134>
 8000340:	19ed      	adds	r5, r5, r7
 8000342:	f108 30ff 	add.w	r0, r8, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x132>
 8000348:	42ab      	cmp	r3, r5
 800034a:	f200 80d1 	bhi.w	80004f0 <__udivmoddi4+0x2d4>
 800034e:	4680      	mov	r8, r0
 8000350:	1aed      	subs	r5, r5, r3
 8000352:	b2a3      	uxth	r3, r4
 8000354:	fbb5 f0f2 	udiv	r0, r5, r2
 8000358:	fb02 5510 	mls	r5, r2, r0, r5
 800035c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000360:	fb0c fc00 	mul.w	ip, ip, r0
 8000364:	45a4      	cmp	ip, r4
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x15c>
 8000368:	19e4      	adds	r4, r4, r7
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x15a>
 8000370:	45a4      	cmp	ip, r4
 8000372:	f200 80b8 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000376:	4618      	mov	r0, r3
 8000378:	eba4 040c 	sub.w	r4, r4, ip
 800037c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000380:	e79d      	b.n	80002be <__udivmoddi4+0xa2>
 8000382:	4631      	mov	r1, r6
 8000384:	4630      	mov	r0, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	f1ce 0420 	rsb	r4, lr, #32
 800038e:	fa05 f30e 	lsl.w	r3, r5, lr
 8000392:	fa07 f70e 	lsl.w	r7, r7, lr
 8000396:	fa20 f804 	lsr.w	r8, r0, r4
 800039a:	0c3a      	lsrs	r2, r7, #16
 800039c:	fa25 f404 	lsr.w	r4, r5, r4
 80003a0:	ea48 0803 	orr.w	r8, r8, r3
 80003a4:	fbb4 f1f2 	udiv	r1, r4, r2
 80003a8:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003ac:	fb02 4411 	mls	r4, r2, r1, r4
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003b8:	fb01 f30c 	mul.w	r3, r1, ip
 80003bc:	42ab      	cmp	r3, r5
 80003be:	fa00 f40e 	lsl.w	r4, r0, lr
 80003c2:	d909      	bls.n	80003d8 <__udivmoddi4+0x1bc>
 80003c4:	19ed      	adds	r5, r5, r7
 80003c6:	f101 30ff 	add.w	r0, r1, #4294967295
 80003ca:	f080 808a 	bcs.w	80004e2 <__udivmoddi4+0x2c6>
 80003ce:	42ab      	cmp	r3, r5
 80003d0:	f240 8087 	bls.w	80004e2 <__udivmoddi4+0x2c6>
 80003d4:	3902      	subs	r1, #2
 80003d6:	443d      	add	r5, r7
 80003d8:	1aeb      	subs	r3, r5, r3
 80003da:	fa1f f588 	uxth.w	r5, r8
 80003de:	fbb3 f0f2 	udiv	r0, r3, r2
 80003e2:	fb02 3310 	mls	r3, r2, r0, r3
 80003e6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ea:	fb00 f30c 	mul.w	r3, r0, ip
 80003ee:	42ab      	cmp	r3, r5
 80003f0:	d907      	bls.n	8000402 <__udivmoddi4+0x1e6>
 80003f2:	19ed      	adds	r5, r5, r7
 80003f4:	f100 38ff 	add.w	r8, r0, #4294967295
 80003f8:	d26f      	bcs.n	80004da <__udivmoddi4+0x2be>
 80003fa:	42ab      	cmp	r3, r5
 80003fc:	d96d      	bls.n	80004da <__udivmoddi4+0x2be>
 80003fe:	3802      	subs	r0, #2
 8000400:	443d      	add	r5, r7
 8000402:	1aeb      	subs	r3, r5, r3
 8000404:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000408:	e78f      	b.n	800032a <__udivmoddi4+0x10e>
 800040a:	f1c1 0720 	rsb	r7, r1, #32
 800040e:	fa22 f807 	lsr.w	r8, r2, r7
 8000412:	408b      	lsls	r3, r1
 8000414:	fa05 f401 	lsl.w	r4, r5, r1
 8000418:	ea48 0303 	orr.w	r3, r8, r3
 800041c:	fa20 fe07 	lsr.w	lr, r0, r7
 8000420:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000424:	40fd      	lsrs	r5, r7
 8000426:	ea4e 0e04 	orr.w	lr, lr, r4
 800042a:	fbb5 f9fc 	udiv	r9, r5, ip
 800042e:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000432:	fb0c 5519 	mls	r5, ip, r9, r5
 8000436:	fa1f f883 	uxth.w	r8, r3
 800043a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800043e:	fb09 f408 	mul.w	r4, r9, r8
 8000442:	42ac      	cmp	r4, r5
 8000444:	fa02 f201 	lsl.w	r2, r2, r1
 8000448:	fa00 fa01 	lsl.w	sl, r0, r1
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x244>
 800044e:	18ed      	adds	r5, r5, r3
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295
 8000454:	d243      	bcs.n	80004de <__udivmoddi4+0x2c2>
 8000456:	42ac      	cmp	r4, r5
 8000458:	d941      	bls.n	80004de <__udivmoddi4+0x2c2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	441d      	add	r5, r3
 8000460:	1b2d      	subs	r5, r5, r4
 8000462:	fa1f fe8e 	uxth.w	lr, lr
 8000466:	fbb5 f0fc 	udiv	r0, r5, ip
 800046a:	fb0c 5510 	mls	r5, ip, r0, r5
 800046e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45a0      	cmp	r8, r4
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x26e>
 800047a:	18e4      	adds	r4, r4, r3
 800047c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000480:	d229      	bcs.n	80004d6 <__udivmoddi4+0x2ba>
 8000482:	45a0      	cmp	r8, r4
 8000484:	d927      	bls.n	80004d6 <__udivmoddi4+0x2ba>
 8000486:	3802      	subs	r0, #2
 8000488:	441c      	add	r4, r3
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba4 0408 	sub.w	r4, r4, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454c      	cmp	r4, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	464d      	mov	r5, r9
 800049c:	d315      	bcc.n	80004ca <__udivmoddi4+0x2ae>
 800049e:	d012      	beq.n	80004c6 <__udivmoddi4+0x2aa>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x29c>
 80004a2:	ebba 030e 	subs.w	r3, sl, lr
 80004a6:	eb64 0405 	sbc.w	r4, r4, r5
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40cb      	lsrs	r3, r1
 80004b0:	431f      	orrs	r7, r3
 80004b2:	40cc      	lsrs	r4, r1
 80004b4:	6037      	str	r7, [r6, #0]
 80004b6:	6074      	str	r4, [r6, #4]
 80004b8:	2100      	movs	r1, #0
 80004ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004be:	4618      	mov	r0, r3
 80004c0:	e6f8      	b.n	80002b4 <__udivmoddi4+0x98>
 80004c2:	4690      	mov	r8, r2
 80004c4:	e6e0      	b.n	8000288 <__udivmoddi4+0x6c>
 80004c6:	45c2      	cmp	sl, r8
 80004c8:	d2ea      	bcs.n	80004a0 <__udivmoddi4+0x284>
 80004ca:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ce:	eb69 0503 	sbc.w	r5, r9, r3
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7e4      	b.n	80004a0 <__udivmoddi4+0x284>
 80004d6:	4628      	mov	r0, r5
 80004d8:	e7d7      	b.n	800048a <__udivmoddi4+0x26e>
 80004da:	4640      	mov	r0, r8
 80004dc:	e791      	b.n	8000402 <__udivmoddi4+0x1e6>
 80004de:	4681      	mov	r9, r0
 80004e0:	e7be      	b.n	8000460 <__udivmoddi4+0x244>
 80004e2:	4601      	mov	r1, r0
 80004e4:	e778      	b.n	80003d8 <__udivmoddi4+0x1bc>
 80004e6:	3802      	subs	r0, #2
 80004e8:	443c      	add	r4, r7
 80004ea:	e745      	b.n	8000378 <__udivmoddi4+0x15c>
 80004ec:	4608      	mov	r0, r1
 80004ee:	e708      	b.n	8000302 <__udivmoddi4+0xe6>
 80004f0:	f1a8 0802 	sub.w	r8, r8, #2
 80004f4:	443d      	add	r5, r7
 80004f6:	e72b      	b.n	8000350 <__udivmoddi4+0x134>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000500:	4a0e      	ldr	r2, [pc, #56]	; (800053c <HAL_Init+0x40>)
 8000502:	4b0e      	ldr	r3, [pc, #56]	; (800053c <HAL_Init+0x40>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800050a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800050c:	4a0b      	ldr	r2, [pc, #44]	; (800053c <HAL_Init+0x40>)
 800050e:	4b0b      	ldr	r3, [pc, #44]	; (800053c <HAL_Init+0x40>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000516:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000518:	4a08      	ldr	r2, [pc, #32]	; (800053c <HAL_Init+0x40>)
 800051a:	4b08      	ldr	r3, [pc, #32]	; (800053c <HAL_Init+0x40>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000522:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000524:	2003      	movs	r0, #3
 8000526:	f000 f92d 	bl	8000784 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800052a:	2000      	movs	r0, #0
 800052c:	f000 f808 	bl	8000540 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000530:	f001 ff94 	bl	800245c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000534:	2300      	movs	r3, #0
}
 8000536:	4618      	mov	r0, r3
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	40023c00 	.word	0x40023c00

08000540 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000548:	4b12      	ldr	r3, [pc, #72]	; (8000594 <HAL_InitTick+0x54>)
 800054a:	681a      	ldr	r2, [r3, #0]
 800054c:	4b12      	ldr	r3, [pc, #72]	; (8000598 <HAL_InitTick+0x58>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	4619      	mov	r1, r3
 8000552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000556:	fbb3 f3f1 	udiv	r3, r3, r1
 800055a:	fbb2 f3f3 	udiv	r3, r2, r3
 800055e:	4618      	mov	r0, r3
 8000560:	f000 f937 	bl	80007d2 <HAL_SYSTICK_Config>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800056a:	2301      	movs	r3, #1
 800056c:	e00e      	b.n	800058c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	2b0f      	cmp	r3, #15
 8000572:	d80a      	bhi.n	800058a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000574:	2200      	movs	r2, #0
 8000576:	6879      	ldr	r1, [r7, #4]
 8000578:	f04f 30ff 	mov.w	r0, #4294967295
 800057c:	f000 f90d 	bl	800079a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000580:	4a06      	ldr	r2, [pc, #24]	; (800059c <HAL_InitTick+0x5c>)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000586:	2300      	movs	r3, #0
 8000588:	e000      	b.n	800058c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800058a:	2301      	movs	r3, #1
}
 800058c:	4618      	mov	r0, r3
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20000028 	.word	0x20000028
 8000598:	20000004 	.word	0x20000004
 800059c:	20000000 	.word	0x20000000

080005a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <HAL_IncTick+0x20>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	461a      	mov	r2, r3
 80005aa:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <HAL_IncTick+0x24>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4413      	add	r3, r2
 80005b0:	4a04      	ldr	r2, [pc, #16]	; (80005c4 <HAL_IncTick+0x24>)
 80005b2:	6013      	str	r3, [r2, #0]
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	20000004 	.word	0x20000004
 80005c4:	20000048 	.word	0x20000048

080005c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  return uwTick;
 80005cc:	4b03      	ldr	r3, [pc, #12]	; (80005dc <HAL_GetTick+0x14>)
 80005ce:	681b      	ldr	r3, [r3, #0]
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	20000048 	.word	0x20000048

080005e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005e8:	f7ff ffee 	bl	80005c8 <HAL_GetTick>
 80005ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005f8:	d005      	beq.n	8000606 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005fa:	4b09      	ldr	r3, [pc, #36]	; (8000620 <HAL_Delay+0x40>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	461a      	mov	r2, r3
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	4413      	add	r3, r2
 8000604:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000606:	bf00      	nop
 8000608:	f7ff ffde 	bl	80005c8 <HAL_GetTick>
 800060c:	4602      	mov	r2, r0
 800060e:	68bb      	ldr	r3, [r7, #8]
 8000610:	1ad2      	subs	r2, r2, r3
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	429a      	cmp	r2, r3
 8000616:	d3f7      	bcc.n	8000608 <HAL_Delay+0x28>
  {
  }
}
 8000618:	bf00      	nop
 800061a:	3710      	adds	r7, #16
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20000004 	.word	0x20000004

08000624 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	f003 0307 	and.w	r3, r3, #7
 8000632:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000634:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <__NVIC_SetPriorityGrouping+0x44>)
 8000636:	68db      	ldr	r3, [r3, #12]
 8000638:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800063a:	68ba      	ldr	r2, [r7, #8]
 800063c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000640:	4013      	ands	r3, r2
 8000642:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800064c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000654:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000656:	4a04      	ldr	r2, [pc, #16]	; (8000668 <__NVIC_SetPriorityGrouping+0x44>)
 8000658:	68bb      	ldr	r3, [r7, #8]
 800065a:	60d3      	str	r3, [r2, #12]
}
 800065c:	bf00      	nop
 800065e:	3714      	adds	r7, #20
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	e000ed00 	.word	0xe000ed00

0800066c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000670:	4b04      	ldr	r3, [pc, #16]	; (8000684 <__NVIC_GetPriorityGrouping+0x18>)
 8000672:	68db      	ldr	r3, [r3, #12]
 8000674:	0a1b      	lsrs	r3, r3, #8
 8000676:	f003 0307 	and.w	r3, r3, #7
}
 800067a:	4618      	mov	r0, r3
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	e000ed00 	.word	0xe000ed00

08000688 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	6039      	str	r1, [r7, #0]
 8000692:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000698:	2b00      	cmp	r3, #0
 800069a:	db0a      	blt.n	80006b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800069c:	490d      	ldr	r1, [pc, #52]	; (80006d4 <__NVIC_SetPriority+0x4c>)
 800069e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a2:	683a      	ldr	r2, [r7, #0]
 80006a4:	b2d2      	uxtb	r2, r2
 80006a6:	0112      	lsls	r2, r2, #4
 80006a8:	b2d2      	uxtb	r2, r2
 80006aa:	440b      	add	r3, r1
 80006ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006b0:	e00a      	b.n	80006c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b2:	4909      	ldr	r1, [pc, #36]	; (80006d8 <__NVIC_SetPriority+0x50>)
 80006b4:	79fb      	ldrb	r3, [r7, #7]
 80006b6:	f003 030f 	and.w	r3, r3, #15
 80006ba:	3b04      	subs	r3, #4
 80006bc:	683a      	ldr	r2, [r7, #0]
 80006be:	b2d2      	uxtb	r2, r2
 80006c0:	0112      	lsls	r2, r2, #4
 80006c2:	b2d2      	uxtb	r2, r2
 80006c4:	440b      	add	r3, r1
 80006c6:	761a      	strb	r2, [r3, #24]
}
 80006c8:	bf00      	nop
 80006ca:	370c      	adds	r7, #12
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000e100 	.word	0xe000e100
 80006d8:	e000ed00 	.word	0xe000ed00

080006dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006dc:	b480      	push	{r7}
 80006de:	b089      	sub	sp, #36	; 0x24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	60f8      	str	r0, [r7, #12]
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	f003 0307 	and.w	r3, r3, #7
 80006ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006f0:	69fb      	ldr	r3, [r7, #28]
 80006f2:	f1c3 0307 	rsb	r3, r3, #7
 80006f6:	2b04      	cmp	r3, #4
 80006f8:	bf28      	it	cs
 80006fa:	2304      	movcs	r3, #4
 80006fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006fe:	69fb      	ldr	r3, [r7, #28]
 8000700:	3304      	adds	r3, #4
 8000702:	2b06      	cmp	r3, #6
 8000704:	d902      	bls.n	800070c <NVIC_EncodePriority+0x30>
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	3b03      	subs	r3, #3
 800070a:	e000      	b.n	800070e <NVIC_EncodePriority+0x32>
 800070c:	2300      	movs	r3, #0
 800070e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000710:	2201      	movs	r2, #1
 8000712:	69bb      	ldr	r3, [r7, #24]
 8000714:	fa02 f303 	lsl.w	r3, r2, r3
 8000718:	1e5a      	subs	r2, r3, #1
 800071a:	68bb      	ldr	r3, [r7, #8]
 800071c:	401a      	ands	r2, r3
 800071e:	697b      	ldr	r3, [r7, #20]
 8000720:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000722:	2101      	movs	r1, #1
 8000724:	697b      	ldr	r3, [r7, #20]
 8000726:	fa01 f303 	lsl.w	r3, r1, r3
 800072a:	1e59      	subs	r1, r3, #1
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000730:	4313      	orrs	r3, r2
         );
}
 8000732:	4618      	mov	r0, r3
 8000734:	3724      	adds	r7, #36	; 0x24
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
	...

08000740 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	3b01      	subs	r3, #1
 800074c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000750:	d301      	bcc.n	8000756 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000752:	2301      	movs	r3, #1
 8000754:	e00f      	b.n	8000776 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000756:	4a0a      	ldr	r2, [pc, #40]	; (8000780 <SysTick_Config+0x40>)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	3b01      	subs	r3, #1
 800075c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800075e:	210f      	movs	r1, #15
 8000760:	f04f 30ff 	mov.w	r0, #4294967295
 8000764:	f7ff ff90 	bl	8000688 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000768:	4b05      	ldr	r3, [pc, #20]	; (8000780 <SysTick_Config+0x40>)
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800076e:	4b04      	ldr	r3, [pc, #16]	; (8000780 <SysTick_Config+0x40>)
 8000770:	2207      	movs	r2, #7
 8000772:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000774:	2300      	movs	r3, #0
}
 8000776:	4618      	mov	r0, r3
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	e000e010 	.word	0xe000e010

08000784 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800078c:	6878      	ldr	r0, [r7, #4]
 800078e:	f7ff ff49 	bl	8000624 <__NVIC_SetPriorityGrouping>
}
 8000792:	bf00      	nop
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}

0800079a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800079a:	b580      	push	{r7, lr}
 800079c:	b086      	sub	sp, #24
 800079e:	af00      	add	r7, sp, #0
 80007a0:	4603      	mov	r3, r0
 80007a2:	60b9      	str	r1, [r7, #8]
 80007a4:	607a      	str	r2, [r7, #4]
 80007a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007a8:	2300      	movs	r3, #0
 80007aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007ac:	f7ff ff5e 	bl	800066c <__NVIC_GetPriorityGrouping>
 80007b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007b2:	687a      	ldr	r2, [r7, #4]
 80007b4:	68b9      	ldr	r1, [r7, #8]
 80007b6:	6978      	ldr	r0, [r7, #20]
 80007b8:	f7ff ff90 	bl	80006dc <NVIC_EncodePriority>
 80007bc:	4602      	mov	r2, r0
 80007be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007c2:	4611      	mov	r1, r2
 80007c4:	4618      	mov	r0, r3
 80007c6:	f7ff ff5f 	bl	8000688 <__NVIC_SetPriority>
}
 80007ca:	bf00      	nop
 80007cc:	3718      	adds	r7, #24
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b082      	sub	sp, #8
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007da:	6878      	ldr	r0, [r7, #4]
 80007dc:	f7ff ffb0 	bl	8000740 <SysTick_Config>
 80007e0:	4603      	mov	r3, r0
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
	...

080007ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b089      	sub	sp, #36	; 0x24
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80007f6:	2300      	movs	r3, #0
 80007f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80007fa:	2300      	movs	r3, #0
 80007fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80007fe:	2300      	movs	r3, #0
 8000800:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000802:	2300      	movs	r3, #0
 8000804:	61fb      	str	r3, [r7, #28]
 8000806:	e177      	b.n	8000af8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000808:	2201      	movs	r2, #1
 800080a:	69fb      	ldr	r3, [r7, #28]
 800080c:	fa02 f303 	lsl.w	r3, r2, r3
 8000810:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	681a      	ldr	r2, [r3, #0]
 8000816:	697b      	ldr	r3, [r7, #20]
 8000818:	4013      	ands	r3, r2
 800081a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800081c:	693a      	ldr	r2, [r7, #16]
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	429a      	cmp	r2, r3
 8000822:	f040 8166 	bne.w	8000af2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	2b01      	cmp	r3, #1
 800082c:	d00b      	beq.n	8000846 <HAL_GPIO_Init+0x5a>
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	685b      	ldr	r3, [r3, #4]
 8000832:	2b02      	cmp	r3, #2
 8000834:	d007      	beq.n	8000846 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800083a:	2b11      	cmp	r3, #17
 800083c:	d003      	beq.n	8000846 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	685b      	ldr	r3, [r3, #4]
 8000842:	2b12      	cmp	r3, #18
 8000844:	d130      	bne.n	80008a8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	689b      	ldr	r3, [r3, #8]
 800084a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800084c:	69fb      	ldr	r3, [r7, #28]
 800084e:	005b      	lsls	r3, r3, #1
 8000850:	2203      	movs	r2, #3
 8000852:	fa02 f303 	lsl.w	r3, r2, r3
 8000856:	43db      	mvns	r3, r3
 8000858:	69ba      	ldr	r2, [r7, #24]
 800085a:	4013      	ands	r3, r2
 800085c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	68da      	ldr	r2, [r3, #12]
 8000862:	69fb      	ldr	r3, [r7, #28]
 8000864:	005b      	lsls	r3, r3, #1
 8000866:	fa02 f303 	lsl.w	r3, r2, r3
 800086a:	69ba      	ldr	r2, [r7, #24]
 800086c:	4313      	orrs	r3, r2
 800086e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	69ba      	ldr	r2, [r7, #24]
 8000874:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	685b      	ldr	r3, [r3, #4]
 800087a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800087c:	2201      	movs	r2, #1
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	fa02 f303 	lsl.w	r3, r2, r3
 8000884:	43db      	mvns	r3, r3
 8000886:	69ba      	ldr	r2, [r7, #24]
 8000888:	4013      	ands	r3, r2
 800088a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	685b      	ldr	r3, [r3, #4]
 8000890:	091b      	lsrs	r3, r3, #4
 8000892:	f003 0201 	and.w	r2, r3, #1
 8000896:	69fb      	ldr	r3, [r7, #28]
 8000898:	fa02 f303 	lsl.w	r3, r2, r3
 800089c:	69ba      	ldr	r2, [r7, #24]
 800089e:	4313      	orrs	r3, r2
 80008a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	69ba      	ldr	r2, [r7, #24]
 80008a6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	68db      	ldr	r3, [r3, #12]
 80008ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80008ae:	69fb      	ldr	r3, [r7, #28]
 80008b0:	005b      	lsls	r3, r3, #1
 80008b2:	2203      	movs	r2, #3
 80008b4:	fa02 f303 	lsl.w	r3, r2, r3
 80008b8:	43db      	mvns	r3, r3
 80008ba:	69ba      	ldr	r2, [r7, #24]
 80008bc:	4013      	ands	r3, r2
 80008be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	689a      	ldr	r2, [r3, #8]
 80008c4:	69fb      	ldr	r3, [r7, #28]
 80008c6:	005b      	lsls	r3, r3, #1
 80008c8:	fa02 f303 	lsl.w	r3, r2, r3
 80008cc:	69ba      	ldr	r2, [r7, #24]
 80008ce:	4313      	orrs	r3, r2
 80008d0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	69ba      	ldr	r2, [r7, #24]
 80008d6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	2b02      	cmp	r3, #2
 80008de:	d003      	beq.n	80008e8 <HAL_GPIO_Init+0xfc>
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	2b12      	cmp	r3, #18
 80008e6:	d123      	bne.n	8000930 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80008e8:	69fb      	ldr	r3, [r7, #28]
 80008ea:	08da      	lsrs	r2, r3, #3
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	3208      	adds	r2, #8
 80008f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80008f6:	69fb      	ldr	r3, [r7, #28]
 80008f8:	f003 0307 	and.w	r3, r3, #7
 80008fc:	009b      	lsls	r3, r3, #2
 80008fe:	220f      	movs	r2, #15
 8000900:	fa02 f303 	lsl.w	r3, r2, r3
 8000904:	43db      	mvns	r3, r3
 8000906:	69ba      	ldr	r2, [r7, #24]
 8000908:	4013      	ands	r3, r2
 800090a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	691a      	ldr	r2, [r3, #16]
 8000910:	69fb      	ldr	r3, [r7, #28]
 8000912:	f003 0307 	and.w	r3, r3, #7
 8000916:	009b      	lsls	r3, r3, #2
 8000918:	fa02 f303 	lsl.w	r3, r2, r3
 800091c:	69ba      	ldr	r2, [r7, #24]
 800091e:	4313      	orrs	r3, r2
 8000920:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000922:	69fb      	ldr	r3, [r7, #28]
 8000924:	08da      	lsrs	r2, r3, #3
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	3208      	adds	r2, #8
 800092a:	69b9      	ldr	r1, [r7, #24]
 800092c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000936:	69fb      	ldr	r3, [r7, #28]
 8000938:	005b      	lsls	r3, r3, #1
 800093a:	2203      	movs	r2, #3
 800093c:	fa02 f303 	lsl.w	r3, r2, r3
 8000940:	43db      	mvns	r3, r3
 8000942:	69ba      	ldr	r2, [r7, #24]
 8000944:	4013      	ands	r3, r2
 8000946:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	f003 0203 	and.w	r2, r3, #3
 8000950:	69fb      	ldr	r3, [r7, #28]
 8000952:	005b      	lsls	r3, r3, #1
 8000954:	fa02 f303 	lsl.w	r3, r2, r3
 8000958:	69ba      	ldr	r2, [r7, #24]
 800095a:	4313      	orrs	r3, r2
 800095c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	69ba      	ldr	r2, [r7, #24]
 8000962:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096c:	2b00      	cmp	r3, #0
 800096e:	f000 80c0 	beq.w	8000af2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	4a65      	ldr	r2, [pc, #404]	; (8000b0c <HAL_GPIO_Init+0x320>)
 8000978:	4b64      	ldr	r3, [pc, #400]	; (8000b0c <HAL_GPIO_Init+0x320>)
 800097a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000980:	6453      	str	r3, [r2, #68]	; 0x44
 8000982:	4b62      	ldr	r3, [pc, #392]	; (8000b0c <HAL_GPIO_Init+0x320>)
 8000984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000986:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800098e:	4a60      	ldr	r2, [pc, #384]	; (8000b10 <HAL_GPIO_Init+0x324>)
 8000990:	69fb      	ldr	r3, [r7, #28]
 8000992:	089b      	lsrs	r3, r3, #2
 8000994:	3302      	adds	r3, #2
 8000996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800099a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800099c:	69fb      	ldr	r3, [r7, #28]
 800099e:	f003 0303 	and.w	r3, r3, #3
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	220f      	movs	r2, #15
 80009a6:	fa02 f303 	lsl.w	r3, r2, r3
 80009aa:	43db      	mvns	r3, r3
 80009ac:	69ba      	ldr	r2, [r7, #24]
 80009ae:	4013      	ands	r3, r2
 80009b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4a57      	ldr	r2, [pc, #348]	; (8000b14 <HAL_GPIO_Init+0x328>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d037      	beq.n	8000a2a <HAL_GPIO_Init+0x23e>
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4a56      	ldr	r2, [pc, #344]	; (8000b18 <HAL_GPIO_Init+0x32c>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d031      	beq.n	8000a26 <HAL_GPIO_Init+0x23a>
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4a55      	ldr	r2, [pc, #340]	; (8000b1c <HAL_GPIO_Init+0x330>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d02b      	beq.n	8000a22 <HAL_GPIO_Init+0x236>
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4a54      	ldr	r2, [pc, #336]	; (8000b20 <HAL_GPIO_Init+0x334>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d025      	beq.n	8000a1e <HAL_GPIO_Init+0x232>
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4a53      	ldr	r2, [pc, #332]	; (8000b24 <HAL_GPIO_Init+0x338>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d01f      	beq.n	8000a1a <HAL_GPIO_Init+0x22e>
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4a52      	ldr	r2, [pc, #328]	; (8000b28 <HAL_GPIO_Init+0x33c>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d019      	beq.n	8000a16 <HAL_GPIO_Init+0x22a>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4a51      	ldr	r2, [pc, #324]	; (8000b2c <HAL_GPIO_Init+0x340>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d013      	beq.n	8000a12 <HAL_GPIO_Init+0x226>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4a50      	ldr	r2, [pc, #320]	; (8000b30 <HAL_GPIO_Init+0x344>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d00d      	beq.n	8000a0e <HAL_GPIO_Init+0x222>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4a4f      	ldr	r2, [pc, #316]	; (8000b34 <HAL_GPIO_Init+0x348>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d007      	beq.n	8000a0a <HAL_GPIO_Init+0x21e>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4a4e      	ldr	r2, [pc, #312]	; (8000b38 <HAL_GPIO_Init+0x34c>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d101      	bne.n	8000a06 <HAL_GPIO_Init+0x21a>
 8000a02:	2309      	movs	r3, #9
 8000a04:	e012      	b.n	8000a2c <HAL_GPIO_Init+0x240>
 8000a06:	230a      	movs	r3, #10
 8000a08:	e010      	b.n	8000a2c <HAL_GPIO_Init+0x240>
 8000a0a:	2308      	movs	r3, #8
 8000a0c:	e00e      	b.n	8000a2c <HAL_GPIO_Init+0x240>
 8000a0e:	2307      	movs	r3, #7
 8000a10:	e00c      	b.n	8000a2c <HAL_GPIO_Init+0x240>
 8000a12:	2306      	movs	r3, #6
 8000a14:	e00a      	b.n	8000a2c <HAL_GPIO_Init+0x240>
 8000a16:	2305      	movs	r3, #5
 8000a18:	e008      	b.n	8000a2c <HAL_GPIO_Init+0x240>
 8000a1a:	2304      	movs	r3, #4
 8000a1c:	e006      	b.n	8000a2c <HAL_GPIO_Init+0x240>
 8000a1e:	2303      	movs	r3, #3
 8000a20:	e004      	b.n	8000a2c <HAL_GPIO_Init+0x240>
 8000a22:	2302      	movs	r3, #2
 8000a24:	e002      	b.n	8000a2c <HAL_GPIO_Init+0x240>
 8000a26:	2301      	movs	r3, #1
 8000a28:	e000      	b.n	8000a2c <HAL_GPIO_Init+0x240>
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	69fa      	ldr	r2, [r7, #28]
 8000a2e:	f002 0203 	and.w	r2, r2, #3
 8000a32:	0092      	lsls	r2, r2, #2
 8000a34:	4093      	lsls	r3, r2
 8000a36:	69ba      	ldr	r2, [r7, #24]
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a3c:	4934      	ldr	r1, [pc, #208]	; (8000b10 <HAL_GPIO_Init+0x324>)
 8000a3e:	69fb      	ldr	r3, [r7, #28]
 8000a40:	089b      	lsrs	r3, r3, #2
 8000a42:	3302      	adds	r3, #2
 8000a44:	69ba      	ldr	r2, [r7, #24]
 8000a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a4a:	4b3c      	ldr	r3, [pc, #240]	; (8000b3c <HAL_GPIO_Init+0x350>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a50:	693b      	ldr	r3, [r7, #16]
 8000a52:	43db      	mvns	r3, r3
 8000a54:	69ba      	ldr	r2, [r7, #24]
 8000a56:	4013      	ands	r3, r2
 8000a58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d003      	beq.n	8000a6e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000a66:	69ba      	ldr	r2, [r7, #24]
 8000a68:	693b      	ldr	r3, [r7, #16]
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a6e:	4a33      	ldr	r2, [pc, #204]	; (8000b3c <HAL_GPIO_Init+0x350>)
 8000a70:	69bb      	ldr	r3, [r7, #24]
 8000a72:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a74:	4b31      	ldr	r3, [pc, #196]	; (8000b3c <HAL_GPIO_Init+0x350>)
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a7a:	693b      	ldr	r3, [r7, #16]
 8000a7c:	43db      	mvns	r3, r3
 8000a7e:	69ba      	ldr	r2, [r7, #24]
 8000a80:	4013      	ands	r3, r2
 8000a82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d003      	beq.n	8000a98 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000a90:	69ba      	ldr	r2, [r7, #24]
 8000a92:	693b      	ldr	r3, [r7, #16]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a98:	4a28      	ldr	r2, [pc, #160]	; (8000b3c <HAL_GPIO_Init+0x350>)
 8000a9a:	69bb      	ldr	r3, [r7, #24]
 8000a9c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a9e:	4b27      	ldr	r3, [pc, #156]	; (8000b3c <HAL_GPIO_Init+0x350>)
 8000aa0:	689b      	ldr	r3, [r3, #8]
 8000aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aa4:	693b      	ldr	r3, [r7, #16]
 8000aa6:	43db      	mvns	r3, r3
 8000aa8:	69ba      	ldr	r2, [r7, #24]
 8000aaa:	4013      	ands	r3, r2
 8000aac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d003      	beq.n	8000ac2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000aba:	69ba      	ldr	r2, [r7, #24]
 8000abc:	693b      	ldr	r3, [r7, #16]
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ac2:	4a1e      	ldr	r2, [pc, #120]	; (8000b3c <HAL_GPIO_Init+0x350>)
 8000ac4:	69bb      	ldr	r3, [r7, #24]
 8000ac6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ac8:	4b1c      	ldr	r3, [pc, #112]	; (8000b3c <HAL_GPIO_Init+0x350>)
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ace:	693b      	ldr	r3, [r7, #16]
 8000ad0:	43db      	mvns	r3, r3
 8000ad2:	69ba      	ldr	r2, [r7, #24]
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d003      	beq.n	8000aec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000ae4:	69ba      	ldr	r2, [r7, #24]
 8000ae6:	693b      	ldr	r3, [r7, #16]
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000aec:	4a13      	ldr	r2, [pc, #76]	; (8000b3c <HAL_GPIO_Init+0x350>)
 8000aee:	69bb      	ldr	r3, [r7, #24]
 8000af0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	3301      	adds	r3, #1
 8000af6:	61fb      	str	r3, [r7, #28]
 8000af8:	69fb      	ldr	r3, [r7, #28]
 8000afa:	2b0f      	cmp	r3, #15
 8000afc:	f67f ae84 	bls.w	8000808 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b00:	bf00      	nop
 8000b02:	3724      	adds	r7, #36	; 0x24
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	40013800 	.word	0x40013800
 8000b14:	40020000 	.word	0x40020000
 8000b18:	40020400 	.word	0x40020400
 8000b1c:	40020800 	.word	0x40020800
 8000b20:	40020c00 	.word	0x40020c00
 8000b24:	40021000 	.word	0x40021000
 8000b28:	40021400 	.word	0x40021400
 8000b2c:	40021800 	.word	0x40021800
 8000b30:	40021c00 	.word	0x40021c00
 8000b34:	40022000 	.word	0x40022000
 8000b38:	40022400 	.word	0x40022400
 8000b3c:	40013c00 	.word	0x40013c00

08000b40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	460b      	mov	r3, r1
 8000b4a:	807b      	strh	r3, [r7, #2]
 8000b4c:	4613      	mov	r3, r2
 8000b4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b50:	787b      	ldrb	r3, [r7, #1]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d003      	beq.n	8000b5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b56:	887a      	ldrh	r2, [r7, #2]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000b5c:	e003      	b.n	8000b66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b5e:	887b      	ldrh	r3, [r7, #2]
 8000b60:	041a      	lsls	r2, r3, #16
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	619a      	str	r2, [r3, #24]
}
 8000b66:	bf00      	nop
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
	...

08000b74 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	603b      	str	r3, [r7, #0]
 8000b82:	4a20      	ldr	r2, [pc, #128]	; (8000c04 <HAL_PWREx_EnableOverDrive+0x90>)
 8000b84:	4b1f      	ldr	r3, [pc, #124]	; (8000c04 <HAL_PWREx_EnableOverDrive+0x90>)
 8000b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b8e:	4b1d      	ldr	r3, [pc, #116]	; (8000c04 <HAL_PWREx_EnableOverDrive+0x90>)
 8000b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b96:	603b      	str	r3, [r7, #0]
 8000b98:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000b9a:	4b1b      	ldr	r3, [pc, #108]	; (8000c08 <HAL_PWREx_EnableOverDrive+0x94>)
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ba0:	f7ff fd12 	bl	80005c8 <HAL_GetTick>
 8000ba4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000ba6:	e009      	b.n	8000bbc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000ba8:	f7ff fd0e 	bl	80005c8 <HAL_GetTick>
 8000bac:	4602      	mov	r2, r0
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	1ad3      	subs	r3, r2, r3
 8000bb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000bb6:	d901      	bls.n	8000bbc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8000bb8:	2303      	movs	r3, #3
 8000bba:	e01f      	b.n	8000bfc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000bbc:	4b13      	ldr	r3, [pc, #76]	; (8000c0c <HAL_PWREx_EnableOverDrive+0x98>)
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bc8:	d1ee      	bne.n	8000ba8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000bca:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000bcc:	2201      	movs	r2, #1
 8000bce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000bd0:	f7ff fcfa 	bl	80005c8 <HAL_GetTick>
 8000bd4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000bd6:	e009      	b.n	8000bec <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000bd8:	f7ff fcf6 	bl	80005c8 <HAL_GetTick>
 8000bdc:	4602      	mov	r2, r0
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	1ad3      	subs	r3, r2, r3
 8000be2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000be6:	d901      	bls.n	8000bec <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8000be8:	2303      	movs	r3, #3
 8000bea:	e007      	b.n	8000bfc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000bec:	4b07      	ldr	r3, [pc, #28]	; (8000c0c <HAL_PWREx_EnableOverDrive+0x98>)
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bf4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000bf8:	d1ee      	bne.n	8000bd8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8000bfa:	2300      	movs	r3, #0
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40023800 	.word	0x40023800
 8000c08:	420e0040 	.word	0x420e0040
 8000c0c:	40007000 	.word	0x40007000
 8000c10:	420e0044 	.word	0x420e0044

08000c14 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d101      	bne.n	8000c26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
 8000c24:	e25b      	b.n	80010de <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d075      	beq.n	8000d1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c32:	4ba3      	ldr	r3, [pc, #652]	; (8000ec0 <HAL_RCC_OscConfig+0x2ac>)
 8000c34:	689b      	ldr	r3, [r3, #8]
 8000c36:	f003 030c 	and.w	r3, r3, #12
 8000c3a:	2b04      	cmp	r3, #4
 8000c3c:	d00c      	beq.n	8000c58 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c3e:	4ba0      	ldr	r3, [pc, #640]	; (8000ec0 <HAL_RCC_OscConfig+0x2ac>)
 8000c40:	689b      	ldr	r3, [r3, #8]
 8000c42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c46:	2b08      	cmp	r3, #8
 8000c48:	d112      	bne.n	8000c70 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c4a:	4b9d      	ldr	r3, [pc, #628]	; (8000ec0 <HAL_RCC_OscConfig+0x2ac>)
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000c56:	d10b      	bne.n	8000c70 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c58:	4b99      	ldr	r3, [pc, #612]	; (8000ec0 <HAL_RCC_OscConfig+0x2ac>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d05b      	beq.n	8000d1c <HAL_RCC_OscConfig+0x108>
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d157      	bne.n	8000d1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	e236      	b.n	80010de <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c78:	d106      	bne.n	8000c88 <HAL_RCC_OscConfig+0x74>
 8000c7a:	4a91      	ldr	r2, [pc, #580]	; (8000ec0 <HAL_RCC_OscConfig+0x2ac>)
 8000c7c:	4b90      	ldr	r3, [pc, #576]	; (8000ec0 <HAL_RCC_OscConfig+0x2ac>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c84:	6013      	str	r3, [r2, #0]
 8000c86:	e01d      	b.n	8000cc4 <HAL_RCC_OscConfig+0xb0>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c90:	d10c      	bne.n	8000cac <HAL_RCC_OscConfig+0x98>
 8000c92:	4a8b      	ldr	r2, [pc, #556]	; (8000ec0 <HAL_RCC_OscConfig+0x2ac>)
 8000c94:	4b8a      	ldr	r3, [pc, #552]	; (8000ec0 <HAL_RCC_OscConfig+0x2ac>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c9c:	6013      	str	r3, [r2, #0]
 8000c9e:	4a88      	ldr	r2, [pc, #544]	; (8000ec0 <HAL_RCC_OscConfig+0x2ac>)
 8000ca0:	4b87      	ldr	r3, [pc, #540]	; (8000ec0 <HAL_RCC_OscConfig+0x2ac>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ca8:	6013      	str	r3, [r2, #0]
 8000caa:	e00b      	b.n	8000cc4 <HAL_RCC_OscConfig+0xb0>
 8000cac:	4a84      	ldr	r2, [pc, #528]	; (8000ec0 <HAL_RCC_OscConfig+0x2ac>)
 8000cae:	4b84      	ldr	r3, [pc, #528]	; (8000ec0 <HAL_RCC_OscConfig+0x2ac>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cb6:	6013      	str	r3, [r2, #0]
 8000cb8:	4a81      	ldr	r2, [pc, #516]	; (8000ec0 <HAL_RCC_OscConfig+0x2ac>)
 8000cba:	4b81      	ldr	r3, [pc, #516]	; (8000ec0 <HAL_RCC_OscConfig+0x2ac>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d013      	beq.n	8000cf4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ccc:	f7ff fc7c 	bl	80005c8 <HAL_GetTick>
 8000cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cd2:	e008      	b.n	8000ce6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cd4:	f7ff fc78 	bl	80005c8 <HAL_GetTick>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	693b      	ldr	r3, [r7, #16]
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	2b64      	cmp	r3, #100	; 0x64
 8000ce0:	d901      	bls.n	8000ce6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	e1fb      	b.n	80010de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ce6:	4b76      	ldr	r3, [pc, #472]	; (8000ec0 <HAL_RCC_OscConfig+0x2ac>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d0f0      	beq.n	8000cd4 <HAL_RCC_OscConfig+0xc0>
 8000cf2:	e014      	b.n	8000d1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cf4:	f7ff fc68 	bl	80005c8 <HAL_GetTick>
 8000cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cfa:	e008      	b.n	8000d0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cfc:	f7ff fc64 	bl	80005c8 <HAL_GetTick>
 8000d00:	4602      	mov	r2, r0
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	2b64      	cmp	r3, #100	; 0x64
 8000d08:	d901      	bls.n	8000d0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	e1e7      	b.n	80010de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d0e:	4b6c      	ldr	r3, [pc, #432]	; (8000ec0 <HAL_RCC_OscConfig+0x2ac>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d1f0      	bne.n	8000cfc <HAL_RCC_OscConfig+0xe8>
 8000d1a:	e000      	b.n	8000d1e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f003 0302 	and.w	r3, r3, #2
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d063      	beq.n	8000df2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d2a:	4b65      	ldr	r3, [pc, #404]	; (8000ec0 <HAL_RCC_OscConfig+0x2ac>)
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	f003 030c 	and.w	r3, r3, #12
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d00b      	beq.n	8000d4e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d36:	4b62      	ldr	r3, [pc, #392]	; (8000ec0 <HAL_RCC_OscConfig+0x2ac>)
 8000d38:	689b      	ldr	r3, [r3, #8]
 8000d3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d3e:	2b08      	cmp	r3, #8
 8000d40:	d11c      	bne.n	8000d7c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d42:	4b5f      	ldr	r3, [pc, #380]	; (8000ec0 <HAL_RCC_OscConfig+0x2ac>)
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d116      	bne.n	8000d7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d4e:	4b5c      	ldr	r3, [pc, #368]	; (8000ec0 <HAL_RCC_OscConfig+0x2ac>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f003 0302 	and.w	r3, r3, #2
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d005      	beq.n	8000d66 <HAL_RCC_OscConfig+0x152>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	68db      	ldr	r3, [r3, #12]
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d001      	beq.n	8000d66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e1bb      	b.n	80010de <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d66:	4956      	ldr	r1, [pc, #344]	; (8000ec0 <HAL_RCC_OscConfig+0x2ac>)
 8000d68:	4b55      	ldr	r3, [pc, #340]	; (8000ec0 <HAL_RCC_OscConfig+0x2ac>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	691b      	ldr	r3, [r3, #16]
 8000d74:	00db      	lsls	r3, r3, #3
 8000d76:	4313      	orrs	r3, r2
 8000d78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d7a:	e03a      	b.n	8000df2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d020      	beq.n	8000dc6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d84:	4b4f      	ldr	r3, [pc, #316]	; (8000ec4 <HAL_RCC_OscConfig+0x2b0>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d8a:	f7ff fc1d 	bl	80005c8 <HAL_GetTick>
 8000d8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d90:	e008      	b.n	8000da4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d92:	f7ff fc19 	bl	80005c8 <HAL_GetTick>
 8000d96:	4602      	mov	r2, r0
 8000d98:	693b      	ldr	r3, [r7, #16]
 8000d9a:	1ad3      	subs	r3, r2, r3
 8000d9c:	2b02      	cmp	r3, #2
 8000d9e:	d901      	bls.n	8000da4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000da0:	2303      	movs	r3, #3
 8000da2:	e19c      	b.n	80010de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000da4:	4b46      	ldr	r3, [pc, #280]	; (8000ec0 <HAL_RCC_OscConfig+0x2ac>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f003 0302 	and.w	r3, r3, #2
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d0f0      	beq.n	8000d92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000db0:	4943      	ldr	r1, [pc, #268]	; (8000ec0 <HAL_RCC_OscConfig+0x2ac>)
 8000db2:	4b43      	ldr	r3, [pc, #268]	; (8000ec0 <HAL_RCC_OscConfig+0x2ac>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	691b      	ldr	r3, [r3, #16]
 8000dbe:	00db      	lsls	r3, r3, #3
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	600b      	str	r3, [r1, #0]
 8000dc4:	e015      	b.n	8000df2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000dc6:	4b3f      	ldr	r3, [pc, #252]	; (8000ec4 <HAL_RCC_OscConfig+0x2b0>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dcc:	f7ff fbfc 	bl	80005c8 <HAL_GetTick>
 8000dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dd2:	e008      	b.n	8000de6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dd4:	f7ff fbf8 	bl	80005c8 <HAL_GetTick>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	2b02      	cmp	r3, #2
 8000de0:	d901      	bls.n	8000de6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000de2:	2303      	movs	r3, #3
 8000de4:	e17b      	b.n	80010de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000de6:	4b36      	ldr	r3, [pc, #216]	; (8000ec0 <HAL_RCC_OscConfig+0x2ac>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f003 0302 	and.w	r3, r3, #2
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d1f0      	bne.n	8000dd4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f003 0308 	and.w	r3, r3, #8
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d030      	beq.n	8000e60 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	695b      	ldr	r3, [r3, #20]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d016      	beq.n	8000e34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e06:	4b30      	ldr	r3, [pc, #192]	; (8000ec8 <HAL_RCC_OscConfig+0x2b4>)
 8000e08:	2201      	movs	r2, #1
 8000e0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e0c:	f7ff fbdc 	bl	80005c8 <HAL_GetTick>
 8000e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e12:	e008      	b.n	8000e26 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e14:	f7ff fbd8 	bl	80005c8 <HAL_GetTick>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	2b02      	cmp	r3, #2
 8000e20:	d901      	bls.n	8000e26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000e22:	2303      	movs	r3, #3
 8000e24:	e15b      	b.n	80010de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e26:	4b26      	ldr	r3, [pc, #152]	; (8000ec0 <HAL_RCC_OscConfig+0x2ac>)
 8000e28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e2a:	f003 0302 	and.w	r3, r3, #2
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d0f0      	beq.n	8000e14 <HAL_RCC_OscConfig+0x200>
 8000e32:	e015      	b.n	8000e60 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e34:	4b24      	ldr	r3, [pc, #144]	; (8000ec8 <HAL_RCC_OscConfig+0x2b4>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e3a:	f7ff fbc5 	bl	80005c8 <HAL_GetTick>
 8000e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e40:	e008      	b.n	8000e54 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e42:	f7ff fbc1 	bl	80005c8 <HAL_GetTick>
 8000e46:	4602      	mov	r2, r0
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	1ad3      	subs	r3, r2, r3
 8000e4c:	2b02      	cmp	r3, #2
 8000e4e:	d901      	bls.n	8000e54 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000e50:	2303      	movs	r3, #3
 8000e52:	e144      	b.n	80010de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e54:	4b1a      	ldr	r3, [pc, #104]	; (8000ec0 <HAL_RCC_OscConfig+0x2ac>)
 8000e56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e58:	f003 0302 	and.w	r3, r3, #2
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d1f0      	bne.n	8000e42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f003 0304 	and.w	r3, r3, #4
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	f000 80a0 	beq.w	8000fae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e72:	4b13      	ldr	r3, [pc, #76]	; (8000ec0 <HAL_RCC_OscConfig+0x2ac>)
 8000e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d10f      	bne.n	8000e9e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60bb      	str	r3, [r7, #8]
 8000e82:	4a0f      	ldr	r2, [pc, #60]	; (8000ec0 <HAL_RCC_OscConfig+0x2ac>)
 8000e84:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <HAL_RCC_OscConfig+0x2ac>)
 8000e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e8e:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <HAL_RCC_OscConfig+0x2ac>)
 8000e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e96:	60bb      	str	r3, [r7, #8]
 8000e98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ecc <HAL_RCC_OscConfig+0x2b8>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d121      	bne.n	8000eee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000eaa:	4a08      	ldr	r2, [pc, #32]	; (8000ecc <HAL_RCC_OscConfig+0x2b8>)
 8000eac:	4b07      	ldr	r3, [pc, #28]	; (8000ecc <HAL_RCC_OscConfig+0x2b8>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000eb6:	f7ff fb87 	bl	80005c8 <HAL_GetTick>
 8000eba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ebc:	e011      	b.n	8000ee2 <HAL_RCC_OscConfig+0x2ce>
 8000ebe:	bf00      	nop
 8000ec0:	40023800 	.word	0x40023800
 8000ec4:	42470000 	.word	0x42470000
 8000ec8:	42470e80 	.word	0x42470e80
 8000ecc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ed0:	f7ff fb7a 	bl	80005c8 <HAL_GetTick>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	d901      	bls.n	8000ee2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	e0fd      	b.n	80010de <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ee2:	4b81      	ldr	r3, [pc, #516]	; (80010e8 <HAL_RCC_OscConfig+0x4d4>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d0f0      	beq.n	8000ed0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d106      	bne.n	8000f04 <HAL_RCC_OscConfig+0x2f0>
 8000ef6:	4a7d      	ldr	r2, [pc, #500]	; (80010ec <HAL_RCC_OscConfig+0x4d8>)
 8000ef8:	4b7c      	ldr	r3, [pc, #496]	; (80010ec <HAL_RCC_OscConfig+0x4d8>)
 8000efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	6713      	str	r3, [r2, #112]	; 0x70
 8000f02:	e01c      	b.n	8000f3e <HAL_RCC_OscConfig+0x32a>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	689b      	ldr	r3, [r3, #8]
 8000f08:	2b05      	cmp	r3, #5
 8000f0a:	d10c      	bne.n	8000f26 <HAL_RCC_OscConfig+0x312>
 8000f0c:	4a77      	ldr	r2, [pc, #476]	; (80010ec <HAL_RCC_OscConfig+0x4d8>)
 8000f0e:	4b77      	ldr	r3, [pc, #476]	; (80010ec <HAL_RCC_OscConfig+0x4d8>)
 8000f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f12:	f043 0304 	orr.w	r3, r3, #4
 8000f16:	6713      	str	r3, [r2, #112]	; 0x70
 8000f18:	4a74      	ldr	r2, [pc, #464]	; (80010ec <HAL_RCC_OscConfig+0x4d8>)
 8000f1a:	4b74      	ldr	r3, [pc, #464]	; (80010ec <HAL_RCC_OscConfig+0x4d8>)
 8000f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f1e:	f043 0301 	orr.w	r3, r3, #1
 8000f22:	6713      	str	r3, [r2, #112]	; 0x70
 8000f24:	e00b      	b.n	8000f3e <HAL_RCC_OscConfig+0x32a>
 8000f26:	4a71      	ldr	r2, [pc, #452]	; (80010ec <HAL_RCC_OscConfig+0x4d8>)
 8000f28:	4b70      	ldr	r3, [pc, #448]	; (80010ec <HAL_RCC_OscConfig+0x4d8>)
 8000f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f2c:	f023 0301 	bic.w	r3, r3, #1
 8000f30:	6713      	str	r3, [r2, #112]	; 0x70
 8000f32:	4a6e      	ldr	r2, [pc, #440]	; (80010ec <HAL_RCC_OscConfig+0x4d8>)
 8000f34:	4b6d      	ldr	r3, [pc, #436]	; (80010ec <HAL_RCC_OscConfig+0x4d8>)
 8000f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f38:	f023 0304 	bic.w	r3, r3, #4
 8000f3c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d015      	beq.n	8000f72 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f46:	f7ff fb3f 	bl	80005c8 <HAL_GetTick>
 8000f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f4c:	e00a      	b.n	8000f64 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f4e:	f7ff fb3b 	bl	80005c8 <HAL_GetTick>
 8000f52:	4602      	mov	r2, r0
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d901      	bls.n	8000f64 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000f60:	2303      	movs	r3, #3
 8000f62:	e0bc      	b.n	80010de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f64:	4b61      	ldr	r3, [pc, #388]	; (80010ec <HAL_RCC_OscConfig+0x4d8>)
 8000f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f68:	f003 0302 	and.w	r3, r3, #2
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d0ee      	beq.n	8000f4e <HAL_RCC_OscConfig+0x33a>
 8000f70:	e014      	b.n	8000f9c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f72:	f7ff fb29 	bl	80005c8 <HAL_GetTick>
 8000f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f78:	e00a      	b.n	8000f90 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f7a:	f7ff fb25 	bl	80005c8 <HAL_GetTick>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	1ad3      	subs	r3, r2, r3
 8000f84:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d901      	bls.n	8000f90 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	e0a6      	b.n	80010de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f90:	4b56      	ldr	r3, [pc, #344]	; (80010ec <HAL_RCC_OscConfig+0x4d8>)
 8000f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f94:	f003 0302 	and.w	r3, r3, #2
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d1ee      	bne.n	8000f7a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000f9c:	7dfb      	ldrb	r3, [r7, #23]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d105      	bne.n	8000fae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fa2:	4a52      	ldr	r2, [pc, #328]	; (80010ec <HAL_RCC_OscConfig+0x4d8>)
 8000fa4:	4b51      	ldr	r3, [pc, #324]	; (80010ec <HAL_RCC_OscConfig+0x4d8>)
 8000fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	699b      	ldr	r3, [r3, #24]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	f000 8092 	beq.w	80010dc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000fb8:	4b4c      	ldr	r3, [pc, #304]	; (80010ec <HAL_RCC_OscConfig+0x4d8>)
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	f003 030c 	and.w	r3, r3, #12
 8000fc0:	2b08      	cmp	r3, #8
 8000fc2:	d05c      	beq.n	800107e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d141      	bne.n	8001050 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fcc:	4b48      	ldr	r3, [pc, #288]	; (80010f0 <HAL_RCC_OscConfig+0x4dc>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd2:	f7ff faf9 	bl	80005c8 <HAL_GetTick>
 8000fd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fd8:	e008      	b.n	8000fec <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fda:	f7ff faf5 	bl	80005c8 <HAL_GetTick>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	1ad3      	subs	r3, r2, r3
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	d901      	bls.n	8000fec <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	e078      	b.n	80010de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fec:	4b3f      	ldr	r3, [pc, #252]	; (80010ec <HAL_RCC_OscConfig+0x4d8>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d1f0      	bne.n	8000fda <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000ff8:	493c      	ldr	r1, [pc, #240]	; (80010ec <HAL_RCC_OscConfig+0x4d8>)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	69da      	ldr	r2, [r3, #28]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6a1b      	ldr	r3, [r3, #32]
 8001002:	431a      	orrs	r2, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001008:	019b      	lsls	r3, r3, #6
 800100a:	431a      	orrs	r2, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001010:	085b      	lsrs	r3, r3, #1
 8001012:	3b01      	subs	r3, #1
 8001014:	041b      	lsls	r3, r3, #16
 8001016:	431a      	orrs	r2, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800101c:	061b      	lsls	r3, r3, #24
 800101e:	4313      	orrs	r3, r2
 8001020:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001022:	4b33      	ldr	r3, [pc, #204]	; (80010f0 <HAL_RCC_OscConfig+0x4dc>)
 8001024:	2201      	movs	r2, #1
 8001026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001028:	f7ff face 	bl	80005c8 <HAL_GetTick>
 800102c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800102e:	e008      	b.n	8001042 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001030:	f7ff faca 	bl	80005c8 <HAL_GetTick>
 8001034:	4602      	mov	r2, r0
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	2b02      	cmp	r3, #2
 800103c:	d901      	bls.n	8001042 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800103e:	2303      	movs	r3, #3
 8001040:	e04d      	b.n	80010de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001042:	4b2a      	ldr	r3, [pc, #168]	; (80010ec <HAL_RCC_OscConfig+0x4d8>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800104a:	2b00      	cmp	r3, #0
 800104c:	d0f0      	beq.n	8001030 <HAL_RCC_OscConfig+0x41c>
 800104e:	e045      	b.n	80010dc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001050:	4b27      	ldr	r3, [pc, #156]	; (80010f0 <HAL_RCC_OscConfig+0x4dc>)
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001056:	f7ff fab7 	bl	80005c8 <HAL_GetTick>
 800105a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800105c:	e008      	b.n	8001070 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800105e:	f7ff fab3 	bl	80005c8 <HAL_GetTick>
 8001062:	4602      	mov	r2, r0
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	2b02      	cmp	r3, #2
 800106a:	d901      	bls.n	8001070 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800106c:	2303      	movs	r3, #3
 800106e:	e036      	b.n	80010de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001070:	4b1e      	ldr	r3, [pc, #120]	; (80010ec <HAL_RCC_OscConfig+0x4d8>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001078:	2b00      	cmp	r3, #0
 800107a:	d1f0      	bne.n	800105e <HAL_RCC_OscConfig+0x44a>
 800107c:	e02e      	b.n	80010dc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	699b      	ldr	r3, [r3, #24]
 8001082:	2b01      	cmp	r3, #1
 8001084:	d101      	bne.n	800108a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e029      	b.n	80010de <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800108a:	4b18      	ldr	r3, [pc, #96]	; (80010ec <HAL_RCC_OscConfig+0x4d8>)
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	69db      	ldr	r3, [r3, #28]
 800109a:	429a      	cmp	r2, r3
 800109c:	d11c      	bne.n	80010d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d115      	bne.n	80010d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80010ac:	68fa      	ldr	r2, [r7, #12]
 80010ae:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80010b2:	4013      	ands	r3, r2
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d10d      	bne.n	80010d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d106      	bne.n	80010d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d001      	beq.n	80010dc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	e000      	b.n	80010de <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80010dc:	2300      	movs	r3, #0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3718      	adds	r7, #24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40007000 	.word	0x40007000
 80010ec:	40023800 	.word	0x40023800
 80010f0:	42470060 	.word	0x42470060

080010f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d101      	bne.n	8001108 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001104:	2301      	movs	r3, #1
 8001106:	e0cc      	b.n	80012a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001108:	4b68      	ldr	r3, [pc, #416]	; (80012ac <HAL_RCC_ClockConfig+0x1b8>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 020f 	and.w	r2, r3, #15
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	429a      	cmp	r2, r3
 8001114:	d20c      	bcs.n	8001130 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001116:	4b65      	ldr	r3, [pc, #404]	; (80012ac <HAL_RCC_ClockConfig+0x1b8>)
 8001118:	683a      	ldr	r2, [r7, #0]
 800111a:	b2d2      	uxtb	r2, r2
 800111c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800111e:	4b63      	ldr	r3, [pc, #396]	; (80012ac <HAL_RCC_ClockConfig+0x1b8>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 020f 	and.w	r2, r3, #15
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	429a      	cmp	r2, r3
 800112a:	d001      	beq.n	8001130 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800112c:	2301      	movs	r3, #1
 800112e:	e0b8      	b.n	80012a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 0302 	and.w	r3, r3, #2
 8001138:	2b00      	cmp	r3, #0
 800113a:	d020      	beq.n	800117e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 0304 	and.w	r3, r3, #4
 8001144:	2b00      	cmp	r3, #0
 8001146:	d005      	beq.n	8001154 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001148:	4a59      	ldr	r2, [pc, #356]	; (80012b0 <HAL_RCC_ClockConfig+0x1bc>)
 800114a:	4b59      	ldr	r3, [pc, #356]	; (80012b0 <HAL_RCC_ClockConfig+0x1bc>)
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001152:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f003 0308 	and.w	r3, r3, #8
 800115c:	2b00      	cmp	r3, #0
 800115e:	d005      	beq.n	800116c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001160:	4a53      	ldr	r2, [pc, #332]	; (80012b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001162:	4b53      	ldr	r3, [pc, #332]	; (80012b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800116a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800116c:	4950      	ldr	r1, [pc, #320]	; (80012b0 <HAL_RCC_ClockConfig+0x1bc>)
 800116e:	4b50      	ldr	r3, [pc, #320]	; (80012b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	4313      	orrs	r3, r2
 800117c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	2b00      	cmp	r3, #0
 8001188:	d044      	beq.n	8001214 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	2b01      	cmp	r3, #1
 8001190:	d107      	bne.n	80011a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001192:	4b47      	ldr	r3, [pc, #284]	; (80012b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d119      	bne.n	80011d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e07f      	b.n	80012a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d003      	beq.n	80011b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011ae:	2b03      	cmp	r3, #3
 80011b0:	d107      	bne.n	80011c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011b2:	4b3f      	ldr	r3, [pc, #252]	; (80012b0 <HAL_RCC_ClockConfig+0x1bc>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d109      	bne.n	80011d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e06f      	b.n	80012a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011c2:	4b3b      	ldr	r3, [pc, #236]	; (80012b0 <HAL_RCC_ClockConfig+0x1bc>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d101      	bne.n	80011d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e067      	b.n	80012a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011d2:	4937      	ldr	r1, [pc, #220]	; (80012b0 <HAL_RCC_ClockConfig+0x1bc>)
 80011d4:	4b36      	ldr	r3, [pc, #216]	; (80012b0 <HAL_RCC_ClockConfig+0x1bc>)
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	f023 0203 	bic.w	r2, r3, #3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011e4:	f7ff f9f0 	bl	80005c8 <HAL_GetTick>
 80011e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011ea:	e00a      	b.n	8001202 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011ec:	f7ff f9ec 	bl	80005c8 <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d901      	bls.n	8001202 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e04f      	b.n	80012a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001202:	4b2b      	ldr	r3, [pc, #172]	; (80012b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	f003 020c 	and.w	r2, r3, #12
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	429a      	cmp	r2, r3
 8001212:	d1eb      	bne.n	80011ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001214:	4b25      	ldr	r3, [pc, #148]	; (80012ac <HAL_RCC_ClockConfig+0x1b8>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 020f 	and.w	r2, r3, #15
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	429a      	cmp	r2, r3
 8001220:	d90c      	bls.n	800123c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001222:	4b22      	ldr	r3, [pc, #136]	; (80012ac <HAL_RCC_ClockConfig+0x1b8>)
 8001224:	683a      	ldr	r2, [r7, #0]
 8001226:	b2d2      	uxtb	r2, r2
 8001228:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800122a:	4b20      	ldr	r3, [pc, #128]	; (80012ac <HAL_RCC_ClockConfig+0x1b8>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 020f 	and.w	r2, r3, #15
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	429a      	cmp	r2, r3
 8001236:	d001      	beq.n	800123c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001238:	2301      	movs	r3, #1
 800123a:	e032      	b.n	80012a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 0304 	and.w	r3, r3, #4
 8001244:	2b00      	cmp	r3, #0
 8001246:	d008      	beq.n	800125a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001248:	4919      	ldr	r1, [pc, #100]	; (80012b0 <HAL_RCC_ClockConfig+0x1bc>)
 800124a:	4b19      	ldr	r3, [pc, #100]	; (80012b0 <HAL_RCC_ClockConfig+0x1bc>)
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	68db      	ldr	r3, [r3, #12]
 8001256:	4313      	orrs	r3, r2
 8001258:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0308 	and.w	r3, r3, #8
 8001262:	2b00      	cmp	r3, #0
 8001264:	d009      	beq.n	800127a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001266:	4912      	ldr	r1, [pc, #72]	; (80012b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001268:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <HAL_RCC_ClockConfig+0x1bc>)
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	691b      	ldr	r3, [r3, #16]
 8001274:	00db      	lsls	r3, r3, #3
 8001276:	4313      	orrs	r3, r2
 8001278:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800127a:	f000 f821 	bl	80012c0 <HAL_RCC_GetSysClockFreq>
 800127e:	4601      	mov	r1, r0
 8001280:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	091b      	lsrs	r3, r3, #4
 8001286:	f003 030f 	and.w	r3, r3, #15
 800128a:	4a0a      	ldr	r2, [pc, #40]	; (80012b4 <HAL_RCC_ClockConfig+0x1c0>)
 800128c:	5cd3      	ldrb	r3, [r2, r3]
 800128e:	fa21 f303 	lsr.w	r3, r1, r3
 8001292:	4a09      	ldr	r2, [pc, #36]	; (80012b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001294:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001296:	4b09      	ldr	r3, [pc, #36]	; (80012bc <HAL_RCC_ClockConfig+0x1c8>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff f950 	bl	8000540 <HAL_InitTick>

  return HAL_OK;
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40023c00 	.word	0x40023c00
 80012b0:	40023800 	.word	0x40023800
 80012b4:	08002688 	.word	0x08002688
 80012b8:	20000028 	.word	0x20000028
 80012bc:	20000000 	.word	0x20000000

080012c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012c4:	b087      	sub	sp, #28
 80012c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80012c8:	2200      	movs	r2, #0
 80012ca:	60fa      	str	r2, [r7, #12]
 80012cc:	2200      	movs	r2, #0
 80012ce:	617a      	str	r2, [r7, #20]
 80012d0:	2200      	movs	r2, #0
 80012d2:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0U;
 80012d4:	2200      	movs	r2, #0
 80012d6:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80012d8:	4a51      	ldr	r2, [pc, #324]	; (8001420 <HAL_RCC_GetSysClockFreq+0x160>)
 80012da:	6892      	ldr	r2, [r2, #8]
 80012dc:	f002 020c 	and.w	r2, r2, #12
 80012e0:	2a04      	cmp	r2, #4
 80012e2:	d007      	beq.n	80012f4 <HAL_RCC_GetSysClockFreq+0x34>
 80012e4:	2a08      	cmp	r2, #8
 80012e6:	d008      	beq.n	80012fa <HAL_RCC_GetSysClockFreq+0x3a>
 80012e8:	2a00      	cmp	r2, #0
 80012ea:	f040 8090 	bne.w	800140e <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80012ee:	4b4d      	ldr	r3, [pc, #308]	; (8001424 <HAL_RCC_GetSysClockFreq+0x164>)
 80012f0:	613b      	str	r3, [r7, #16]
       break;
 80012f2:	e08f      	b.n	8001414 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80012f4:	4b4c      	ldr	r3, [pc, #304]	; (8001428 <HAL_RCC_GetSysClockFreq+0x168>)
 80012f6:	613b      	str	r3, [r7, #16]
      break;
 80012f8:	e08c      	b.n	8001414 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80012fa:	4a49      	ldr	r2, [pc, #292]	; (8001420 <HAL_RCC_GetSysClockFreq+0x160>)
 80012fc:	6852      	ldr	r2, [r2, #4]
 80012fe:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001302:	60fa      	str	r2, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001304:	4a46      	ldr	r2, [pc, #280]	; (8001420 <HAL_RCC_GetSysClockFreq+0x160>)
 8001306:	6852      	ldr	r2, [r2, #4]
 8001308:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 800130c:	2a00      	cmp	r2, #0
 800130e:	d023      	beq.n	8001358 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001310:	4b43      	ldr	r3, [pc, #268]	; (8001420 <HAL_RCC_GetSysClockFreq+0x160>)
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	099b      	lsrs	r3, r3, #6
 8001316:	f04f 0400 	mov.w	r4, #0
 800131a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800131e:	f04f 0200 	mov.w	r2, #0
 8001322:	ea03 0301 	and.w	r3, r3, r1
 8001326:	ea04 0402 	and.w	r4, r4, r2
 800132a:	4a3f      	ldr	r2, [pc, #252]	; (8001428 <HAL_RCC_GetSysClockFreq+0x168>)
 800132c:	fb02 f104 	mul.w	r1, r2, r4
 8001330:	2200      	movs	r2, #0
 8001332:	fb02 f203 	mul.w	r2, r2, r3
 8001336:	440a      	add	r2, r1
 8001338:	493b      	ldr	r1, [pc, #236]	; (8001428 <HAL_RCC_GetSysClockFreq+0x168>)
 800133a:	fba3 0101 	umull	r0, r1, r3, r1
 800133e:	1853      	adds	r3, r2, r1
 8001340:	4619      	mov	r1, r3
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	f04f 0400 	mov.w	r4, #0
 8001348:	461a      	mov	r2, r3
 800134a:	4623      	mov	r3, r4
 800134c:	f7fe ff4e 	bl	80001ec <__aeabi_uldivmod>
 8001350:	4603      	mov	r3, r0
 8001352:	460c      	mov	r4, r1
 8001354:	617b      	str	r3, [r7, #20]
 8001356:	e04c      	b.n	80013f2 <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001358:	4a31      	ldr	r2, [pc, #196]	; (8001420 <HAL_RCC_GetSysClockFreq+0x160>)
 800135a:	6852      	ldr	r2, [r2, #4]
 800135c:	0992      	lsrs	r2, r2, #6
 800135e:	4611      	mov	r1, r2
 8001360:	f04f 0200 	mov.w	r2, #0
 8001364:	f240 15ff 	movw	r5, #511	; 0x1ff
 8001368:	f04f 0600 	mov.w	r6, #0
 800136c:	ea05 0501 	and.w	r5, r5, r1
 8001370:	ea06 0602 	and.w	r6, r6, r2
 8001374:	4629      	mov	r1, r5
 8001376:	4632      	mov	r2, r6
 8001378:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 800137c:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 8001380:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 8001384:	4651      	mov	r1, sl
 8001386:	465a      	mov	r2, fp
 8001388:	46aa      	mov	sl, r5
 800138a:	46b3      	mov	fp, r6
 800138c:	4655      	mov	r5, sl
 800138e:	465e      	mov	r6, fp
 8001390:	1b4d      	subs	r5, r1, r5
 8001392:	eb62 0606 	sbc.w	r6, r2, r6
 8001396:	4629      	mov	r1, r5
 8001398:	4632      	mov	r2, r6
 800139a:	0194      	lsls	r4, r2, #6
 800139c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80013a0:	018b      	lsls	r3, r1, #6
 80013a2:	1a5b      	subs	r3, r3, r1
 80013a4:	eb64 0402 	sbc.w	r4, r4, r2
 80013a8:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 80013ac:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 80013b0:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 80013b4:	4643      	mov	r3, r8
 80013b6:	464c      	mov	r4, r9
 80013b8:	4655      	mov	r5, sl
 80013ba:	465e      	mov	r6, fp
 80013bc:	18ed      	adds	r5, r5, r3
 80013be:	eb46 0604 	adc.w	r6, r6, r4
 80013c2:	462b      	mov	r3, r5
 80013c4:	4634      	mov	r4, r6
 80013c6:	02a2      	lsls	r2, r4, #10
 80013c8:	607a      	str	r2, [r7, #4]
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80013d0:	607a      	str	r2, [r7, #4]
 80013d2:	029b      	lsls	r3, r3, #10
 80013d4:	603b      	str	r3, [r7, #0]
 80013d6:	e897 0018 	ldmia.w	r7, {r3, r4}
 80013da:	4618      	mov	r0, r3
 80013dc:	4621      	mov	r1, r4
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	f04f 0400 	mov.w	r4, #0
 80013e4:	461a      	mov	r2, r3
 80013e6:	4623      	mov	r3, r4
 80013e8:	f7fe ff00 	bl	80001ec <__aeabi_uldivmod>
 80013ec:	4603      	mov	r3, r0
 80013ee:	460c      	mov	r4, r1
 80013f0:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80013f2:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <HAL_RCC_GetSysClockFreq+0x160>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	0c1b      	lsrs	r3, r3, #16
 80013f8:	f003 0303 	and.w	r3, r3, #3
 80013fc:	3301      	adds	r3, #1
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001402:	697a      	ldr	r2, [r7, #20]
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	fbb2 f3f3 	udiv	r3, r2, r3
 800140a:	613b      	str	r3, [r7, #16]
      break;
 800140c:	e002      	b.n	8001414 <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800140e:	4b05      	ldr	r3, [pc, #20]	; (8001424 <HAL_RCC_GetSysClockFreq+0x164>)
 8001410:	613b      	str	r3, [r7, #16]
      break;
 8001412:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001414:	693b      	ldr	r3, [r7, #16]
}
 8001416:	4618      	mov	r0, r3
 8001418:	371c      	adds	r7, #28
 800141a:	46bd      	mov	sp, r7
 800141c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001420:	40023800 	.word	0x40023800
 8001424:	00f42400 	.word	0x00f42400
 8001428:	017d7840 	.word	0x017d7840

0800142c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d101      	bne.n	800143e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e055      	b.n	80014ea <HAL_SPI_Init+0xbe>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800144a:	b2db      	uxtb	r3, r3
 800144c:	2b00      	cmp	r3, #0
 800144e:	d106      	bne.n	800145e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2200      	movs	r2, #0
 8001454:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f001 f827 	bl	80024ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2202      	movs	r2, #2
 8001462:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	6812      	ldr	r2, [r2, #0]
 800146e:	6812      	ldr	r2, [r2, #0]
 8001470:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001474:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	6851      	ldr	r1, [r2, #4]
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	6892      	ldr	r2, [r2, #8]
 8001482:	4311      	orrs	r1, r2
 8001484:	687a      	ldr	r2, [r7, #4]
 8001486:	68d2      	ldr	r2, [r2, #12]
 8001488:	4311      	orrs	r1, r2
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	6912      	ldr	r2, [r2, #16]
 800148e:	4311      	orrs	r1, r2
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	6952      	ldr	r2, [r2, #20]
 8001494:	4311      	orrs	r1, r2
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	6992      	ldr	r2, [r2, #24]
 800149a:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800149e:	4311      	orrs	r1, r2
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	69d2      	ldr	r2, [r2, #28]
 80014a4:	4311      	orrs	r1, r2
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	6a12      	ldr	r2, [r2, #32]
 80014aa:	4311      	orrs	r1, r2
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80014b0:	430a      	orrs	r2, r1
 80014b2:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	6992      	ldr	r2, [r2, #24]
 80014bc:	0c12      	lsrs	r2, r2, #16
 80014be:	f002 0104 	and.w	r1, r2, #4
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80014c6:	430a      	orrs	r2, r1
 80014c8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	6812      	ldr	r2, [r2, #0]
 80014d2:	69d2      	ldr	r2, [r2, #28]
 80014d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014d8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2201      	movs	r2, #1
 80014e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b08c      	sub	sp, #48	; 0x30
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	60f8      	str	r0, [r7, #12]
 80014fa:	60b9      	str	r1, [r7, #8]
 80014fc:	607a      	str	r2, [r7, #4]
 80014fe:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001500:	2301      	movs	r3, #1
 8001502:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001504:	2300      	movs	r3, #0
 8001506:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001510:	2b01      	cmp	r3, #1
 8001512:	d101      	bne.n	8001518 <HAL_SPI_TransmitReceive+0x26>
 8001514:	2302      	movs	r3, #2
 8001516:	e188      	b.n	800182a <HAL_SPI_TransmitReceive+0x338>
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2201      	movs	r2, #1
 800151c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001520:	f7ff f852 	bl	80005c8 <HAL_GetTick>
 8001524:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800152c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001536:	887b      	ldrh	r3, [r7, #2]
 8001538:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800153a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800153e:	2b01      	cmp	r3, #1
 8001540:	d00f      	beq.n	8001562 <HAL_SPI_TransmitReceive+0x70>
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001548:	d107      	bne.n	800155a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d103      	bne.n	800155a <HAL_SPI_TransmitReceive+0x68>
 8001552:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001556:	2b04      	cmp	r3, #4
 8001558:	d003      	beq.n	8001562 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800155a:	2302      	movs	r3, #2
 800155c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001560:	e159      	b.n	8001816 <HAL_SPI_TransmitReceive+0x324>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d005      	beq.n	8001574 <HAL_SPI_TransmitReceive+0x82>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d002      	beq.n	8001574 <HAL_SPI_TransmitReceive+0x82>
 800156e:	887b      	ldrh	r3, [r7, #2]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d103      	bne.n	800157c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800157a:	e14c      	b.n	8001816 <HAL_SPI_TransmitReceive+0x324>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001582:	b2db      	uxtb	r3, r3
 8001584:	2b04      	cmp	r3, #4
 8001586:	d003      	beq.n	8001590 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2205      	movs	r2, #5
 800158c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2200      	movs	r2, #0
 8001594:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	887a      	ldrh	r2, [r7, #2]
 80015a0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	887a      	ldrh	r2, [r7, #2]
 80015a6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	68ba      	ldr	r2, [r7, #8]
 80015ac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	887a      	ldrh	r2, [r7, #2]
 80015b2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	887a      	ldrh	r2, [r7, #2]
 80015b8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2200      	movs	r2, #0
 80015be:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2200      	movs	r2, #0
 80015c4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015d0:	2b40      	cmp	r3, #64	; 0x40
 80015d2:	d007      	beq.n	80015e4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	68fa      	ldr	r2, [r7, #12]
 80015da:	6812      	ldr	r2, [r2, #0]
 80015dc:	6812      	ldr	r2, [r2, #0]
 80015de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80015ec:	d178      	bne.n	80016e0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d002      	beq.n	80015fc <HAL_SPI_TransmitReceive+0x10a>
 80015f6:	8b7b      	ldrh	r3, [r7, #26]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d166      	bne.n	80016ca <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	68fa      	ldr	r2, [r7, #12]
 8001602:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001604:	8812      	ldrh	r2, [r2, #0]
 8001606:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160c:	1c9a      	adds	r2, r3, #2
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001616:	b29b      	uxth	r3, r3
 8001618:	3b01      	subs	r3, #1
 800161a:	b29a      	uxth	r2, r3
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001620:	e053      	b.n	80016ca <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	f003 0302 	and.w	r3, r3, #2
 800162c:	2b02      	cmp	r3, #2
 800162e:	d11b      	bne.n	8001668 <HAL_SPI_TransmitReceive+0x176>
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001634:	b29b      	uxth	r3, r3
 8001636:	2b00      	cmp	r3, #0
 8001638:	d016      	beq.n	8001668 <HAL_SPI_TransmitReceive+0x176>
 800163a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800163c:	2b01      	cmp	r3, #1
 800163e:	d113      	bne.n	8001668 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	68fa      	ldr	r2, [r7, #12]
 8001646:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001648:	8812      	ldrh	r2, [r2, #0]
 800164a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001650:	1c9a      	adds	r2, r3, #2
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800165a:	b29b      	uxth	r3, r3
 800165c:	3b01      	subs	r3, #1
 800165e:	b29a      	uxth	r2, r3
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001664:	2300      	movs	r3, #0
 8001666:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	2b01      	cmp	r3, #1
 8001674:	d119      	bne.n	80016aa <HAL_SPI_TransmitReceive+0x1b8>
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800167a:	b29b      	uxth	r3, r3
 800167c:	2b00      	cmp	r3, #0
 800167e:	d014      	beq.n	80016aa <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001684:	68fa      	ldr	r2, [r7, #12]
 8001686:	6812      	ldr	r2, [r2, #0]
 8001688:	68d2      	ldr	r2, [r2, #12]
 800168a:	b292      	uxth	r2, r2
 800168c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001692:	1c9a      	adds	r2, r3, #2
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800169c:	b29b      	uxth	r3, r3
 800169e:	3b01      	subs	r3, #1
 80016a0:	b29a      	uxth	r2, r3
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80016a6:	2301      	movs	r3, #1
 80016a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80016aa:	f7fe ff8d 	bl	80005c8 <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b2:	1ad2      	subs	r2, r2, r3
 80016b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d307      	bcc.n	80016ca <HAL_SPI_TransmitReceive+0x1d8>
 80016ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016c0:	d003      	beq.n	80016ca <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80016c8:	e0a5      	b.n	8001816 <HAL_SPI_TransmitReceive+0x324>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d1a6      	bne.n	8001622 <HAL_SPI_TransmitReceive+0x130>
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80016d8:	b29b      	uxth	r3, r3
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1a1      	bne.n	8001622 <HAL_SPI_TransmitReceive+0x130>
 80016de:	e07c      	b.n	80017da <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d002      	beq.n	80016ee <HAL_SPI_TransmitReceive+0x1fc>
 80016e8:	8b7b      	ldrh	r3, [r7, #26]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d16b      	bne.n	80017c6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	330c      	adds	r3, #12
 80016f4:	68fa      	ldr	r2, [r7, #12]
 80016f6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80016f8:	7812      	ldrb	r2, [r2, #0]
 80016fa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001700:	1c5a      	adds	r2, r3, #1
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800170a:	b29b      	uxth	r3, r3
 800170c:	3b01      	subs	r3, #1
 800170e:	b29a      	uxth	r2, r3
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001714:	e057      	b.n	80017c6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f003 0302 	and.w	r3, r3, #2
 8001720:	2b02      	cmp	r3, #2
 8001722:	d11c      	bne.n	800175e <HAL_SPI_TransmitReceive+0x26c>
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001728:	b29b      	uxth	r3, r3
 800172a:	2b00      	cmp	r3, #0
 800172c:	d017      	beq.n	800175e <HAL_SPI_TransmitReceive+0x26c>
 800172e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001730:	2b01      	cmp	r3, #1
 8001732:	d114      	bne.n	800175e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	330c      	adds	r3, #12
 800173a:	68fa      	ldr	r2, [r7, #12]
 800173c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800173e:	7812      	ldrb	r2, [r2, #0]
 8001740:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	1c5a      	adds	r2, r3, #1
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001750:	b29b      	uxth	r3, r3
 8001752:	3b01      	subs	r3, #1
 8001754:	b29a      	uxth	r2, r3
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800175a:	2300      	movs	r3, #0
 800175c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f003 0301 	and.w	r3, r3, #1
 8001768:	2b01      	cmp	r3, #1
 800176a:	d119      	bne.n	80017a0 <HAL_SPI_TransmitReceive+0x2ae>
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001770:	b29b      	uxth	r3, r3
 8001772:	2b00      	cmp	r3, #0
 8001774:	d014      	beq.n	80017a0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800177a:	68fa      	ldr	r2, [r7, #12]
 800177c:	6812      	ldr	r2, [r2, #0]
 800177e:	68d2      	ldr	r2, [r2, #12]
 8001780:	b2d2      	uxtb	r2, r2
 8001782:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001788:	1c5a      	adds	r2, r3, #1
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001792:	b29b      	uxth	r3, r3
 8001794:	3b01      	subs	r3, #1
 8001796:	b29a      	uxth	r2, r3
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800179c:	2301      	movs	r3, #1
 800179e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80017a0:	f7fe ff12 	bl	80005c8 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a8:	1ad2      	subs	r2, r2, r3
 80017aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d303      	bcc.n	80017b8 <HAL_SPI_TransmitReceive+0x2c6>
 80017b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017b6:	d102      	bne.n	80017be <HAL_SPI_TransmitReceive+0x2cc>
 80017b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d103      	bne.n	80017c6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80017c4:	e027      	b.n	8001816 <HAL_SPI_TransmitReceive+0x324>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d1a2      	bne.n	8001716 <HAL_SPI_TransmitReceive+0x224>
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d19d      	bne.n	8001716 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80017da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80017de:	68f8      	ldr	r0, [r7, #12]
 80017e0:	f000 f892 	bl	8001908 <SPI_EndRxTxTransaction>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d006      	beq.n	80017f8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2220      	movs	r2, #32
 80017f4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80017f6:	e00e      	b.n	8001816 <HAL_SPI_TransmitReceive+0x324>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d10a      	bne.n	8001816 <HAL_SPI_TransmitReceive+0x324>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	617b      	str	r3, [r7, #20]
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	617b      	str	r3, [r7, #20]
 8001814:	697b      	ldr	r3, [r7, #20]
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2201      	movs	r2, #1
 800181a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2200      	movs	r2, #0
 8001822:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001826:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800182a:	4618      	mov	r0, r3
 800182c:	3730      	adds	r7, #48	; 0x30
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b084      	sub	sp, #16
 8001836:	af00      	add	r7, sp, #0
 8001838:	60f8      	str	r0, [r7, #12]
 800183a:	60b9      	str	r1, [r7, #8]
 800183c:	603b      	str	r3, [r7, #0]
 800183e:	4613      	mov	r3, r2
 8001840:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001842:	e04c      	b.n	80018de <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800184a:	d048      	beq.n	80018de <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800184c:	f7fe febc 	bl	80005c8 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	1ad2      	subs	r2, r2, r3
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	429a      	cmp	r2, r3
 800185a:	d202      	bcs.n	8001862 <SPI_WaitFlagStateUntilTimeout+0x30>
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d13d      	bne.n	80018de <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	68fa      	ldr	r2, [r7, #12]
 8001868:	6812      	ldr	r2, [r2, #0]
 800186a:	6852      	ldr	r2, [r2, #4]
 800186c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001870:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800187a:	d111      	bne.n	80018a0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001884:	d004      	beq.n	8001890 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800188e:	d107      	bne.n	80018a0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	68fa      	ldr	r2, [r7, #12]
 8001896:	6812      	ldr	r2, [r2, #0]
 8001898:	6812      	ldr	r2, [r2, #0]
 800189a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800189e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018a8:	d10f      	bne.n	80018ca <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	68fa      	ldr	r2, [r7, #12]
 80018b0:	6812      	ldr	r2, [r2, #0]
 80018b2:	6812      	ldr	r2, [r2, #0]
 80018b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	68fa      	ldr	r2, [r7, #12]
 80018c0:	6812      	ldr	r2, [r2, #0]
 80018c2:	6812      	ldr	r2, [r2, #0]
 80018c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80018c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2201      	movs	r2, #1
 80018ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e00f      	b.n	80018fe <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	689a      	ldr	r2, [r3, #8]
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	401a      	ands	r2, r3
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	bf0c      	ite	eq
 80018ee:	2301      	moveq	r3, #1
 80018f0:	2300      	movne	r3, #0
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	461a      	mov	r2, r3
 80018f6:	79fb      	ldrb	r3, [r7, #7]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d1a3      	bne.n	8001844 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
	...

08001908 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b088      	sub	sp, #32
 800190c:	af02      	add	r7, sp, #8
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001914:	4b1b      	ldr	r3, [pc, #108]	; (8001984 <SPI_EndRxTxTransaction+0x7c>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a1b      	ldr	r2, [pc, #108]	; (8001988 <SPI_EndRxTxTransaction+0x80>)
 800191a:	fba2 2303 	umull	r2, r3, r2, r3
 800191e:	0d5b      	lsrs	r3, r3, #21
 8001920:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001924:	fb02 f303 	mul.w	r3, r2, r3
 8001928:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001932:	d112      	bne.n	800195a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	9300      	str	r3, [sp, #0]
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	2200      	movs	r2, #0
 800193c:	2180      	movs	r1, #128	; 0x80
 800193e:	68f8      	ldr	r0, [r7, #12]
 8001940:	f7ff ff77 	bl	8001832 <SPI_WaitFlagStateUntilTimeout>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d016      	beq.n	8001978 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800194e:	f043 0220 	orr.w	r2, r3, #32
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e00f      	b.n	800197a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d00a      	beq.n	8001976 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	3b01      	subs	r3, #1
 8001964:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001970:	2b80      	cmp	r3, #128	; 0x80
 8001972:	d0f2      	beq.n	800195a <SPI_EndRxTxTransaction+0x52>
 8001974:	e000      	b.n	8001978 <SPI_EndRxTxTransaction+0x70>
        break;
 8001976:	bf00      	nop
  }

  return HAL_OK;
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3718      	adds	r7, #24
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	20000028 	.word	0x20000028
 8001988:	165e9f81 	.word	0x165e9f81

0800198c <Motor_move>:
#include "Motor.h"
#include "stm32f4xx_it.h"


void Motor_move(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
	for(int counter=0;counter<=128;counter++)
 8001992:	2300      	movs	r3, #0
 8001994:	607b      	str	r3, [r7, #4]
 8001996:	e05e      	b.n	8001a56 <Motor_move+0xca>
	{
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
 8001998:	2201      	movs	r2, #1
 800199a:	2108      	movs	r1, #8
 800199c:	4864      	ldr	r0, [pc, #400]	; (8001b30 <Motor_move+0x1a4>)
 800199e:	f7ff f8cf 	bl	8000b40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_2,GPIO_PIN_RESET);
 80019a2:	2200      	movs	r2, #0
 80019a4:	2104      	movs	r1, #4
 80019a6:	4862      	ldr	r0, [pc, #392]	; (8001b30 <Motor_move+0x1a4>)
 80019a8:	f7ff f8ca 	bl	8000b40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_4,GPIO_PIN_RESET);
 80019ac:	2200      	movs	r2, #0
 80019ae:	2110      	movs	r1, #16
 80019b0:	485f      	ldr	r0, [pc, #380]	; (8001b30 <Motor_move+0x1a4>)
 80019b2:	f7ff f8c5 	bl	8000b40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_5,GPIO_PIN_RESET);
 80019b6:	2200      	movs	r2, #0
 80019b8:	2120      	movs	r1, #32
 80019ba:	485d      	ldr	r0, [pc, #372]	; (8001b30 <Motor_move+0x1a4>)
 80019bc:	f7ff f8c0 	bl	8000b40 <HAL_GPIO_WritePin>

		HAL_Delay(2);
 80019c0:	2002      	movs	r0, #2
 80019c2:	f7fe fe0d 	bl	80005e0 <HAL_Delay>

		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_RESET);
 80019c6:	2200      	movs	r2, #0
 80019c8:	2108      	movs	r1, #8
 80019ca:	4859      	ldr	r0, [pc, #356]	; (8001b30 <Motor_move+0x1a4>)
 80019cc:	f7ff f8b8 	bl	8000b40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_2,GPIO_PIN_SET);
 80019d0:	2201      	movs	r2, #1
 80019d2:	2104      	movs	r1, #4
 80019d4:	4856      	ldr	r0, [pc, #344]	; (8001b30 <Motor_move+0x1a4>)
 80019d6:	f7ff f8b3 	bl	8000b40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_4,GPIO_PIN_RESET);
 80019da:	2200      	movs	r2, #0
 80019dc:	2110      	movs	r1, #16
 80019de:	4854      	ldr	r0, [pc, #336]	; (8001b30 <Motor_move+0x1a4>)
 80019e0:	f7ff f8ae 	bl	8000b40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_5,GPIO_PIN_RESET);
 80019e4:	2200      	movs	r2, #0
 80019e6:	2120      	movs	r1, #32
 80019e8:	4851      	ldr	r0, [pc, #324]	; (8001b30 <Motor_move+0x1a4>)
 80019ea:	f7ff f8a9 	bl	8000b40 <HAL_GPIO_WritePin>

		HAL_Delay(2);
 80019ee:	2002      	movs	r0, #2
 80019f0:	f7fe fdf6 	bl	80005e0 <HAL_Delay>

		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_RESET);
 80019f4:	2200      	movs	r2, #0
 80019f6:	2108      	movs	r1, #8
 80019f8:	484d      	ldr	r0, [pc, #308]	; (8001b30 <Motor_move+0x1a4>)
 80019fa:	f7ff f8a1 	bl	8000b40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_2,GPIO_PIN_RESET);
 80019fe:	2200      	movs	r2, #0
 8001a00:	2104      	movs	r1, #4
 8001a02:	484b      	ldr	r0, [pc, #300]	; (8001b30 <Motor_move+0x1a4>)
 8001a04:	f7ff f89c 	bl	8000b40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_4,GPIO_PIN_SET);
 8001a08:	2201      	movs	r2, #1
 8001a0a:	2110      	movs	r1, #16
 8001a0c:	4848      	ldr	r0, [pc, #288]	; (8001b30 <Motor_move+0x1a4>)
 8001a0e:	f7ff f897 	bl	8000b40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_5,GPIO_PIN_RESET);
 8001a12:	2200      	movs	r2, #0
 8001a14:	2120      	movs	r1, #32
 8001a16:	4846      	ldr	r0, [pc, #280]	; (8001b30 <Motor_move+0x1a4>)
 8001a18:	f7ff f892 	bl	8000b40 <HAL_GPIO_WritePin>

		HAL_Delay(2);
 8001a1c:	2002      	movs	r0, #2
 8001a1e:	f7fe fddf 	bl	80005e0 <HAL_Delay>

		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_RESET);
 8001a22:	2200      	movs	r2, #0
 8001a24:	2108      	movs	r1, #8
 8001a26:	4842      	ldr	r0, [pc, #264]	; (8001b30 <Motor_move+0x1a4>)
 8001a28:	f7ff f88a 	bl	8000b40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_2,GPIO_PIN_RESET);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	2104      	movs	r1, #4
 8001a30:	483f      	ldr	r0, [pc, #252]	; (8001b30 <Motor_move+0x1a4>)
 8001a32:	f7ff f885 	bl	8000b40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_4,GPIO_PIN_RESET);
 8001a36:	2200      	movs	r2, #0
 8001a38:	2110      	movs	r1, #16
 8001a3a:	483d      	ldr	r0, [pc, #244]	; (8001b30 <Motor_move+0x1a4>)
 8001a3c:	f7ff f880 	bl	8000b40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_5,GPIO_PIN_SET);
 8001a40:	2201      	movs	r2, #1
 8001a42:	2120      	movs	r1, #32
 8001a44:	483a      	ldr	r0, [pc, #232]	; (8001b30 <Motor_move+0x1a4>)
 8001a46:	f7ff f87b 	bl	8000b40 <HAL_GPIO_WritePin>

		HAL_Delay(2);
 8001a4a:	2002      	movs	r0, #2
 8001a4c:	f7fe fdc8 	bl	80005e0 <HAL_Delay>
	for(int counter=0;counter<=128;counter++)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3301      	adds	r3, #1
 8001a54:	607b      	str	r3, [r7, #4]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2b80      	cmp	r3, #128	; 0x80
 8001a5a:	dd9d      	ble.n	8001998 <Motor_move+0xc>


	}

	for(int counter=0;counter<=128;counter++)
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	603b      	str	r3, [r7, #0]
 8001a60:	e05e      	b.n	8001b20 <Motor_move+0x194>
	{
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_RESET);
 8001a62:	2200      	movs	r2, #0
 8001a64:	2108      	movs	r1, #8
 8001a66:	4832      	ldr	r0, [pc, #200]	; (8001b30 <Motor_move+0x1a4>)
 8001a68:	f7ff f86a 	bl	8000b40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_2,GPIO_PIN_RESET);
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	2104      	movs	r1, #4
 8001a70:	482f      	ldr	r0, [pc, #188]	; (8001b30 <Motor_move+0x1a4>)
 8001a72:	f7ff f865 	bl	8000b40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_4,GPIO_PIN_RESET);
 8001a76:	2200      	movs	r2, #0
 8001a78:	2110      	movs	r1, #16
 8001a7a:	482d      	ldr	r0, [pc, #180]	; (8001b30 <Motor_move+0x1a4>)
 8001a7c:	f7ff f860 	bl	8000b40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_5,GPIO_PIN_SET);
 8001a80:	2201      	movs	r2, #1
 8001a82:	2120      	movs	r1, #32
 8001a84:	482a      	ldr	r0, [pc, #168]	; (8001b30 <Motor_move+0x1a4>)
 8001a86:	f7ff f85b 	bl	8000b40 <HAL_GPIO_WritePin>

		HAL_Delay(2);
 8001a8a:	2002      	movs	r0, #2
 8001a8c:	f7fe fda8 	bl	80005e0 <HAL_Delay>

		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_RESET);
 8001a90:	2200      	movs	r2, #0
 8001a92:	2108      	movs	r1, #8
 8001a94:	4826      	ldr	r0, [pc, #152]	; (8001b30 <Motor_move+0x1a4>)
 8001a96:	f7ff f853 	bl	8000b40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_2,GPIO_PIN_RESET);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2104      	movs	r1, #4
 8001a9e:	4824      	ldr	r0, [pc, #144]	; (8001b30 <Motor_move+0x1a4>)
 8001aa0:	f7ff f84e 	bl	8000b40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_4,GPIO_PIN_SET);
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	2110      	movs	r1, #16
 8001aa8:	4821      	ldr	r0, [pc, #132]	; (8001b30 <Motor_move+0x1a4>)
 8001aaa:	f7ff f849 	bl	8000b40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_5,GPIO_PIN_RESET);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2120      	movs	r1, #32
 8001ab2:	481f      	ldr	r0, [pc, #124]	; (8001b30 <Motor_move+0x1a4>)
 8001ab4:	f7ff f844 	bl	8000b40 <HAL_GPIO_WritePin>

		HAL_Delay(2);
 8001ab8:	2002      	movs	r0, #2
 8001aba:	f7fe fd91 	bl	80005e0 <HAL_Delay>

		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_RESET);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	2108      	movs	r1, #8
 8001ac2:	481b      	ldr	r0, [pc, #108]	; (8001b30 <Motor_move+0x1a4>)
 8001ac4:	f7ff f83c 	bl	8000b40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_2,GPIO_PIN_SET);
 8001ac8:	2201      	movs	r2, #1
 8001aca:	2104      	movs	r1, #4
 8001acc:	4818      	ldr	r0, [pc, #96]	; (8001b30 <Motor_move+0x1a4>)
 8001ace:	f7ff f837 	bl	8000b40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_4,GPIO_PIN_RESET);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	2110      	movs	r1, #16
 8001ad6:	4816      	ldr	r0, [pc, #88]	; (8001b30 <Motor_move+0x1a4>)
 8001ad8:	f7ff f832 	bl	8000b40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_5,GPIO_PIN_RESET);
 8001adc:	2200      	movs	r2, #0
 8001ade:	2120      	movs	r1, #32
 8001ae0:	4813      	ldr	r0, [pc, #76]	; (8001b30 <Motor_move+0x1a4>)
 8001ae2:	f7ff f82d 	bl	8000b40 <HAL_GPIO_WritePin>

		HAL_Delay(2);
 8001ae6:	2002      	movs	r0, #2
 8001ae8:	f7fe fd7a 	bl	80005e0 <HAL_Delay>

		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
 8001aec:	2201      	movs	r2, #1
 8001aee:	2108      	movs	r1, #8
 8001af0:	480f      	ldr	r0, [pc, #60]	; (8001b30 <Motor_move+0x1a4>)
 8001af2:	f7ff f825 	bl	8000b40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_2,GPIO_PIN_RESET);
 8001af6:	2200      	movs	r2, #0
 8001af8:	2104      	movs	r1, #4
 8001afa:	480d      	ldr	r0, [pc, #52]	; (8001b30 <Motor_move+0x1a4>)
 8001afc:	f7ff f820 	bl	8000b40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_4,GPIO_PIN_RESET);
 8001b00:	2200      	movs	r2, #0
 8001b02:	2110      	movs	r1, #16
 8001b04:	480a      	ldr	r0, [pc, #40]	; (8001b30 <Motor_move+0x1a4>)
 8001b06:	f7ff f81b 	bl	8000b40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_5,GPIO_PIN_RESET);
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	2120      	movs	r1, #32
 8001b0e:	4808      	ldr	r0, [pc, #32]	; (8001b30 <Motor_move+0x1a4>)
 8001b10:	f7ff f816 	bl	8000b40 <HAL_GPIO_WritePin>

		HAL_Delay(2);
 8001b14:	2002      	movs	r0, #2
 8001b16:	f7fe fd63 	bl	80005e0 <HAL_Delay>
	for(int counter=0;counter<=128;counter++)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	603b      	str	r3, [r7, #0]
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	2b80      	cmp	r3, #128	; 0x80
 8001b24:	dd9d      	ble.n	8001a62 <Motor_move+0xd6>


	}


}
 8001b26:	bf00      	nop
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40021000 	.word	0x40021000

08001b34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b38:	f7fe fce0 	bl	80004fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b3c:	f000 f884 	bl	8001c48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b40:	f000 f928 	bl	8001d94 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001b44:	f000 f8f0 	bl	8001d28 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
 
  MFRC522_Init();
 8001b48:	f000 fc2c 	bl	80023a4 <MFRC522_Init>

	HAL_Delay(1000);
 8001b4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b50:	f7fe fd46 	bl	80005e0 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	    {
		  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_13,GPIO_PIN_SET);
 8001b54:	2201      	movs	r2, #1
 8001b56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b5a:	4835      	ldr	r0, [pc, #212]	; (8001c30 <main+0xfc>)
 8001b5c:	f7fe fff0 	bl	8000b40 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_14,GPIO_PIN_RESET);
 8001b60:	2200      	movs	r2, #0
 8001b62:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b66:	4832      	ldr	r0, [pc, #200]	; (8001c30 <main+0xfc>)
 8001b68:	f7fe ffea 	bl	8000b40 <HAL_GPIO_WritePin>


	    /* USER CODE END WHILE */

	    /* USER CODE BEGIN 3 */
	  		if (MFRC522_Check(CardID) == MI_OK)
 8001b6c:	4831      	ldr	r0, [pc, #196]	; (8001c34 <main+0x100>)
 8001b6e:	f000 fa2d 	bl	8001fcc <MFRC522_Check>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d156      	bne.n	8001c26 <main+0xf2>
	  			{

	  			if (MFRC522_Compare(CardID, MyID) == MI_OK)
 8001b78:	492f      	ldr	r1, [pc, #188]	; (8001c38 <main+0x104>)
 8001b7a:	482e      	ldr	r0, [pc, #184]	; (8001c34 <main+0x100>)
 8001b7c:	f000 fa3f 	bl	8001ffe <MFRC522_Compare>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d10e      	bne.n	8001ba4 <main+0x70>
	  				{
	  			  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_13,GPIO_PIN_RESET);
 8001b86:	2200      	movs	r2, #0
 8001b88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b8c:	4828      	ldr	r0, [pc, #160]	; (8001c30 <main+0xfc>)
 8001b8e:	f7fe ffd7 	bl	8000b40 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_14,GPIO_PIN_SET);
 8001b92:	2201      	movs	r2, #1
 8001b94:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b98:	4825      	ldr	r0, [pc, #148]	; (8001c30 <main+0xfc>)
 8001b9a:	f7fe ffd1 	bl	8000b40 <HAL_GPIO_WritePin>

	  				Motor_move();
 8001b9e:	f7ff fef5 	bl	800198c <Motor_move>
 8001ba2:	e040      	b.n	8001c26 <main+0xf2>
	  				}
	  				else if(MFRC522_Compare(CardID, MyID1) == MI_OK)
 8001ba4:	4925      	ldr	r1, [pc, #148]	; (8001c3c <main+0x108>)
 8001ba6:	4823      	ldr	r0, [pc, #140]	; (8001c34 <main+0x100>)
 8001ba8:	f000 fa29 	bl	8001ffe <MFRC522_Compare>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d10e      	bne.n	8001bd0 <main+0x9c>
	  				{
	  	  			  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_13,GPIO_PIN_RESET);
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bb8:	481d      	ldr	r0, [pc, #116]	; (8001c30 <main+0xfc>)
 8001bba:	f7fe ffc1 	bl	8000b40 <HAL_GPIO_WritePin>
	  	  			  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_14,GPIO_PIN_SET);
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bc4:	481a      	ldr	r0, [pc, #104]	; (8001c30 <main+0xfc>)
 8001bc6:	f7fe ffbb 	bl	8000b40 <HAL_GPIO_WritePin>
		  				Motor_move();
 8001bca:	f7ff fedf 	bl	800198c <Motor_move>
 8001bce:	e02a      	b.n	8001c26 <main+0xf2>

	  				}
	  				else if(MFRC522_Compare(CardID, MyID2) == MI_OK)
 8001bd0:	491b      	ldr	r1, [pc, #108]	; (8001c40 <main+0x10c>)
 8001bd2:	4818      	ldr	r0, [pc, #96]	; (8001c34 <main+0x100>)
 8001bd4:	f000 fa13 	bl	8001ffe <MFRC522_Compare>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d10e      	bne.n	8001bfc <main+0xc8>
					{
					  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_13,GPIO_PIN_RESET);
 8001bde:	2200      	movs	r2, #0
 8001be0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001be4:	4812      	ldr	r0, [pc, #72]	; (8001c30 <main+0xfc>)
 8001be6:	f7fe ffab 	bl	8000b40 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_14,GPIO_PIN_SET);
 8001bea:	2201      	movs	r2, #1
 8001bec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bf0:	480f      	ldr	r0, [pc, #60]	; (8001c30 <main+0xfc>)
 8001bf2:	f7fe ffa5 	bl	8000b40 <HAL_GPIO_WritePin>
		  				Motor_move();
 8001bf6:	f7ff fec9 	bl	800198c <Motor_move>
 8001bfa:	e014      	b.n	8001c26 <main+0xf2>

					}
	  				else if(MFRC522_Compare(CardID, MyID3) == MI_OK)
 8001bfc:	4911      	ldr	r1, [pc, #68]	; (8001c44 <main+0x110>)
 8001bfe:	480d      	ldr	r0, [pc, #52]	; (8001c34 <main+0x100>)
 8001c00:	f000 f9fd 	bl	8001ffe <MFRC522_Compare>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d10d      	bne.n	8001c26 <main+0xf2>
					{
					  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_13,GPIO_PIN_RESET);
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c10:	4807      	ldr	r0, [pc, #28]	; (8001c30 <main+0xfc>)
 8001c12:	f7fe ff95 	bl	8000b40 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_14,GPIO_PIN_SET);
 8001c16:	2201      	movs	r2, #1
 8001c18:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c1c:	4804      	ldr	r0, [pc, #16]	; (8001c30 <main+0xfc>)
 8001c1e:	f7fe ff8f 	bl	8000b40 <HAL_GPIO_WritePin>
		  				Motor_move();
 8001c22:	f7ff feb3 	bl	800198c <Motor_move>

					}

				}

	  		  HAL_Delay(10);
 8001c26:	200a      	movs	r0, #10
 8001c28:	f7fe fcda 	bl	80005e0 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_13,GPIO_PIN_SET);
 8001c2c:	e792      	b.n	8001b54 <main+0x20>
 8001c2e:	bf00      	nop
 8001c30:	40021800 	.word	0x40021800
 8001c34:	200000a4 	.word	0x200000a4
 8001c38:	20000020 	.word	0x20000020
 8001c3c:	20000008 	.word	0x20000008
 8001c40:	20000010 	.word	0x20000010
 8001c44:	20000018 	.word	0x20000018

08001c48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b094      	sub	sp, #80	; 0x50
 8001c4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c4e:	f107 0320 	add.w	r3, r7, #32
 8001c52:	2230      	movs	r2, #48	; 0x30
 8001c54:	2100      	movs	r1, #0
 8001c56:	4618      	mov	r0, r3
 8001c58:	f000 fd02 	bl	8002660 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c5c:	f107 030c 	add.w	r3, r7, #12
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	605a      	str	r2, [r3, #4]
 8001c66:	609a      	str	r2, [r3, #8]
 8001c68:	60da      	str	r2, [r3, #12]
 8001c6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	60bb      	str	r3, [r7, #8]
 8001c70:	4a2b      	ldr	r2, [pc, #172]	; (8001d20 <SystemClock_Config+0xd8>)
 8001c72:	4b2b      	ldr	r3, [pc, #172]	; (8001d20 <SystemClock_Config+0xd8>)
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c7a:	6413      	str	r3, [r2, #64]	; 0x40
 8001c7c:	4b28      	ldr	r3, [pc, #160]	; (8001d20 <SystemClock_Config+0xd8>)
 8001c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c84:	60bb      	str	r3, [r7, #8]
 8001c86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c88:	2300      	movs	r3, #0
 8001c8a:	607b      	str	r3, [r7, #4]
 8001c8c:	4a25      	ldr	r2, [pc, #148]	; (8001d24 <SystemClock_Config+0xdc>)
 8001c8e:	4b25      	ldr	r3, [pc, #148]	; (8001d24 <SystemClock_Config+0xdc>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c96:	6013      	str	r3, [r2, #0]
 8001c98:	4b22      	ldr	r3, [pc, #136]	; (8001d24 <SystemClock_Config+0xdc>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ca0:	607b      	str	r3, [r7, #4]
 8001ca2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cac:	2310      	movs	r3, #16
 8001cae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001cb8:	2308      	movs	r3, #8
 8001cba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001cbc:	23b4      	movs	r3, #180	; 0xb4
 8001cbe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001cc4:	2304      	movs	r3, #4
 8001cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cc8:	f107 0320 	add.w	r3, r7, #32
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7fe ffa1 	bl	8000c14 <HAL_RCC_OscConfig>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001cd8:	f000 f8e6 	bl	8001ea8 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001cdc:	f7fe ff4a 	bl	8000b74 <HAL_PWREx_EnableOverDrive>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001ce6:	f000 f8df 	bl	8001ea8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cea:	230f      	movs	r3, #15
 8001cec:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cee:	2302      	movs	r3, #2
 8001cf0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001cf6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001cfa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001cfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d00:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001d02:	f107 030c 	add.w	r3, r7, #12
 8001d06:	2105      	movs	r1, #5
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff f9f3 	bl	80010f4 <HAL_RCC_ClockConfig>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001d14:	f000 f8c8 	bl	8001ea8 <Error_Handler>
  }
}
 8001d18:	bf00      	nop
 8001d1a:	3750      	adds	r7, #80	; 0x50
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40023800 	.word	0x40023800
 8001d24:	40007000 	.word	0x40007000

08001d28 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001d2c:	4b17      	ldr	r3, [pc, #92]	; (8001d8c <MX_SPI1_Init+0x64>)
 8001d2e:	4a18      	ldr	r2, [pc, #96]	; (8001d90 <MX_SPI1_Init+0x68>)
 8001d30:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d32:	4b16      	ldr	r3, [pc, #88]	; (8001d8c <MX_SPI1_Init+0x64>)
 8001d34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d38:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d3a:	4b14      	ldr	r3, [pc, #80]	; (8001d8c <MX_SPI1_Init+0x64>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d40:	4b12      	ldr	r3, [pc, #72]	; (8001d8c <MX_SPI1_Init+0x64>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d46:	4b11      	ldr	r3, [pc, #68]	; (8001d8c <MX_SPI1_Init+0x64>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d4c:	4b0f      	ldr	r3, [pc, #60]	; (8001d8c <MX_SPI1_Init+0x64>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d52:	4b0e      	ldr	r3, [pc, #56]	; (8001d8c <MX_SPI1_Init+0x64>)
 8001d54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d58:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001d5a:	4b0c      	ldr	r3, [pc, #48]	; (8001d8c <MX_SPI1_Init+0x64>)
 8001d5c:	2218      	movs	r2, #24
 8001d5e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d60:	4b0a      	ldr	r3, [pc, #40]	; (8001d8c <MX_SPI1_Init+0x64>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d66:	4b09      	ldr	r3, [pc, #36]	; (8001d8c <MX_SPI1_Init+0x64>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d6c:	4b07      	ldr	r3, [pc, #28]	; (8001d8c <MX_SPI1_Init+0x64>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001d72:	4b06      	ldr	r3, [pc, #24]	; (8001d8c <MX_SPI1_Init+0x64>)
 8001d74:	220a      	movs	r2, #10
 8001d76:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d78:	4804      	ldr	r0, [pc, #16]	; (8001d8c <MX_SPI1_Init+0x64>)
 8001d7a:	f7ff fb57 	bl	800142c <HAL_SPI_Init>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001d84:	f000 f890 	bl	8001ea8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d88:	bf00      	nop
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	2000004c 	.word	0x2000004c
 8001d90:	40013000 	.word	0x40013000

08001d94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b08a      	sub	sp, #40	; 0x28
 8001d98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9a:	f107 0314 	add.w	r3, r7, #20
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]
 8001da2:	605a      	str	r2, [r3, #4]
 8001da4:	609a      	str	r2, [r3, #8]
 8001da6:	60da      	str	r2, [r3, #12]
 8001da8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	613b      	str	r3, [r7, #16]
 8001dae:	4a3a      	ldr	r2, [pc, #232]	; (8001e98 <MX_GPIO_Init+0x104>)
 8001db0:	4b39      	ldr	r3, [pc, #228]	; (8001e98 <MX_GPIO_Init+0x104>)
 8001db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db4:	f043 0301 	orr.w	r3, r3, #1
 8001db8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dba:	4b37      	ldr	r3, [pc, #220]	; (8001e98 <MX_GPIO_Init+0x104>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	613b      	str	r3, [r7, #16]
 8001dc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	4a33      	ldr	r2, [pc, #204]	; (8001e98 <MX_GPIO_Init+0x104>)
 8001dcc:	4b32      	ldr	r3, [pc, #200]	; (8001e98 <MX_GPIO_Init+0x104>)
 8001dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd0:	f043 0302 	orr.w	r3, r3, #2
 8001dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd6:	4b30      	ldr	r3, [pc, #192]	; (8001e98 <MX_GPIO_Init+0x104>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	60bb      	str	r3, [r7, #8]
 8001de6:	4a2c      	ldr	r2, [pc, #176]	; (8001e98 <MX_GPIO_Init+0x104>)
 8001de8:	4b2b      	ldr	r3, [pc, #172]	; (8001e98 <MX_GPIO_Init+0x104>)
 8001dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dec:	f043 0310 	orr.w	r3, r3, #16
 8001df0:	6313      	str	r3, [r2, #48]	; 0x30
 8001df2:	4b29      	ldr	r3, [pc, #164]	; (8001e98 <MX_GPIO_Init+0x104>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	f003 0310 	and.w	r3, r3, #16
 8001dfa:	60bb      	str	r3, [r7, #8]
 8001dfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	607b      	str	r3, [r7, #4]
 8001e02:	4a25      	ldr	r2, [pc, #148]	; (8001e98 <MX_GPIO_Init+0x104>)
 8001e04:	4b24      	ldr	r3, [pc, #144]	; (8001e98 <MX_GPIO_Init+0x104>)
 8001e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0e:	4b22      	ldr	r3, [pc, #136]	; (8001e98 <MX_GPIO_Init+0x104>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e16:	607b      	str	r3, [r7, #4]
 8001e18:	687b      	ldr	r3, [r7, #4]



  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	2110      	movs	r1, #16
 8001e1e:	481f      	ldr	r0, [pc, #124]	; (8001e9c <MX_GPIO_Init+0x108>)
 8001e20:	f7fe fe8e 	bl	8000b40 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_3, GPIO_PIN_RESET);
 8001e24:	2200      	movs	r2, #0
 8001e26:	213c      	movs	r1, #60	; 0x3c
 8001e28:	481d      	ldr	r0, [pc, #116]	; (8001ea0 <MX_GPIO_Init+0x10c>)
 8001e2a:	f7fe fe89 	bl	8000b40 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001e34:	481b      	ldr	r0, [pc, #108]	; (8001ea4 <MX_GPIO_Init+0x110>)
 8001e36:	f7fe fe83 	bl	8000b40 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_3;
 8001e3a:	233c      	movs	r3, #60	; 0x3c
 8001e3c:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	61bb      	str	r3, [r7, #24]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e42:	2300      	movs	r3, #0
 8001e44:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e46:	2300      	movs	r3, #0
 8001e48:	623b      	str	r3, [r7, #32]
   HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e4a:	f107 0314 	add.w	r3, r7, #20
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4813      	ldr	r0, [pc, #76]	; (8001ea0 <MX_GPIO_Init+0x10c>)
 8001e52:	f7fe fccb 	bl	80007ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001e56:	2310      	movs	r3, #16
 8001e58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e62:	2300      	movs	r3, #0
 8001e64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e66:	f107 0314 	add.w	r3, r7, #20
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	480b      	ldr	r0, [pc, #44]	; (8001e9c <MX_GPIO_Init+0x108>)
 8001e6e:	f7fe fcbd 	bl	80007ec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001e72:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001e76:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	61bb      	str	r3, [r7, #24]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e80:	2300      	movs	r3, #0
 8001e82:	623b      	str	r3, [r7, #32]
   HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e84:	f107 0314 	add.w	r3, r7, #20
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4806      	ldr	r0, [pc, #24]	; (8001ea4 <MX_GPIO_Init+0x110>)
 8001e8c:	f7fe fcae 	bl	80007ec <HAL_GPIO_Init>

}
 8001e90:	bf00      	nop
 8001e92:	3728      	adds	r7, #40	; 0x28
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	40023800 	.word	0x40023800
 8001e9c:	40020000 	.word	0x40020000
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	40021800 	.word	0x40021800

08001ea8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001eac:	bf00      	nop
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
	...

08001eb8 <SPI1SendByte>:
extern void MFRC522_Reset(void);
extern void MFRC522_AntennaOn(void);
extern void MFRC522_AntennaOff(void);
extern void MFRC522_Halt(void);

uint8_t SPI1SendByte(uint8_t data) {
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af02      	add	r7, sp, #8
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	71fb      	strb	r3, [r7, #7]
	unsigned char writeCommand[1];
	unsigned char readValue[1];

	writeCommand[0] = data;
 8001ec2:	79fb      	ldrb	r3, [r7, #7]
 8001ec4:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&writeCommand, (uint8_t*)&readValue, 1, 10);
 8001ec6:	f107 0208 	add.w	r2, r7, #8
 8001eca:	f107 010c 	add.w	r1, r7, #12
 8001ece:	230a      	movs	r3, #10
 8001ed0:	9300      	str	r3, [sp, #0]
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	4803      	ldr	r0, [pc, #12]	; (8001ee4 <SPI1SendByte+0x2c>)
 8001ed6:	f7ff fb0c 	bl	80014f2 <HAL_SPI_TransmitReceive>
	return readValue[0];
 8001eda:	7a3b      	ldrb	r3, [r7, #8]
	//SPI1->DR = data;															// ????? ? SPI1
	//while (!(SPI1->SR & SPI_SR_RXNE));     				// ???? ????????? ?????? (STM32F103)
	//for (uint8_t i=0; i<50; i++) {};
	//data = SPI1->DR;															// ?????? ???????? ??????
	//return data;
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3710      	adds	r7, #16
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	2000004c 	.word	0x2000004c

08001ee8 <SPI1_WriteReg>:

void SPI1_WriteReg(uint8_t address, uint8_t value) {
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	460a      	mov	r2, r1
 8001ef2:	71fb      	strb	r3, [r7, #7]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	71bb      	strb	r3, [r7, #6]
	cs_reset();
 8001ef8:	2200      	movs	r2, #0
 8001efa:	2110      	movs	r1, #16
 8001efc:	4809      	ldr	r0, [pc, #36]	; (8001f24 <SPI1_WriteReg+0x3c>)
 8001efe:	f7fe fe1f 	bl	8000b40 <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 8001f02:	79fb      	ldrb	r3, [r7, #7]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff ffd7 	bl	8001eb8 <SPI1SendByte>
	SPI1SendByte(value);
 8001f0a:	79bb      	ldrb	r3, [r7, #6]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff ffd3 	bl	8001eb8 <SPI1SendByte>
	cs_set();
 8001f12:	2201      	movs	r2, #1
 8001f14:	2110      	movs	r1, #16
 8001f16:	4803      	ldr	r0, [pc, #12]	; (8001f24 <SPI1_WriteReg+0x3c>)
 8001f18:	f7fe fe12 	bl	8000b40 <HAL_GPIO_WritePin>
}
 8001f1c:	bf00      	nop
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40020000 	.word	0x40020000

08001f28 <SPI1_ReadReg>:

uint8_t SPI1_ReadReg(uint8_t address) {
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	4603      	mov	r3, r0
 8001f30:	71fb      	strb	r3, [r7, #7]
	uint8_t	val;

	cs_reset();
 8001f32:	2200      	movs	r2, #0
 8001f34:	2110      	movs	r1, #16
 8001f36:	480b      	ldr	r0, [pc, #44]	; (8001f64 <SPI1_ReadReg+0x3c>)
 8001f38:	f7fe fe02 	bl	8000b40 <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 8001f3c:	79fb      	ldrb	r3, [r7, #7]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7ff ffba 	bl	8001eb8 <SPI1SendByte>
	val = SPI1SendByte(0x00);
 8001f44:	2000      	movs	r0, #0
 8001f46:	f7ff ffb7 	bl	8001eb8 <SPI1SendByte>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	73fb      	strb	r3, [r7, #15]
	cs_set();
 8001f4e:	2201      	movs	r2, #1
 8001f50:	2110      	movs	r1, #16
 8001f52:	4804      	ldr	r0, [pc, #16]	; (8001f64 <SPI1_ReadReg+0x3c>)
 8001f54:	f7fe fdf4 	bl	8000b40 <HAL_GPIO_WritePin>
	return val;
 8001f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40020000 	.word	0x40020000

08001f68 <MFRC522_WriteRegister>:

void MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	460a      	mov	r2, r1
 8001f72:	71fb      	strb	r3, [r7, #7]
 8001f74:	4613      	mov	r3, r2
 8001f76:	71bb      	strb	r3, [r7, #6]
	addr = (addr << 1) & 0x7E;															// Address format: 0XXXXXX0
 8001f78:	79fb      	ldrb	r3, [r7, #7]
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8001f82:	71fb      	strb	r3, [r7, #7]
  SPI1_WriteReg(addr, val);
 8001f84:	79ba      	ldrb	r2, [r7, #6]
 8001f86:	79fb      	ldrb	r3, [r7, #7]
 8001f88:	4611      	mov	r1, r2
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7ff ffac 	bl	8001ee8 <SPI1_WriteReg>
}
 8001f90:	bf00      	nop
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <MFRC522_ReadRegister>:

uint8_t MFRC522_ReadRegister(uint8_t addr) {
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	addr = ((addr << 1) & 0x7E) | 0x80;
 8001fa2:	79fb      	ldrb	r3, [r7, #7]
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	b25b      	sxtb	r3, r3
 8001fa8:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8001fac:	b25b      	sxtb	r3, r3
 8001fae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001fb2:	b25b      	sxtb	r3, r3
 8001fb4:	71fb      	strb	r3, [r7, #7]
	val = SPI1_ReadReg(addr);
 8001fb6:	79fb      	ldrb	r3, [r7, #7]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff ffb5 	bl	8001f28 <SPI1_ReadReg>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	73fb      	strb	r3, [r7, #15]
	return val;
 8001fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3710      	adds	r7, #16
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <MFRC522_Check>:

uint8_t MFRC522_Check(uint8_t* id) {
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
	uint8_t status;
	status = MFRC522_Request(PICC_REQIDL, id);							// Find cards, return card type
 8001fd4:	6879      	ldr	r1, [r7, #4]
 8001fd6:	2026      	movs	r0, #38	; 0x26
 8001fd8:	f000 f86a 	bl	80020b0 <MFRC522_Request>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) status = MFRC522_Anticoll(id);			// Card detected. Anti-collision, return card serial number 4 bytes
 8001fe0:	7bfb      	ldrb	r3, [r7, #15]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d104      	bne.n	8001ff0 <MFRC522_Check+0x24>
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 f956 	bl	8002298 <MFRC522_Anticoll>
 8001fec:	4603      	mov	r3, r0
 8001fee:	73fb      	strb	r3, [r7, #15]
	MFRC522_Halt();																					// Command card into hibernation
 8001ff0:	f000 fa19 	bl	8002426 <MFRC522_Halt>
	return status;
 8001ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3710      	adds	r7, #16
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <MFRC522_Compare>:

uint8_t MFRC522_Compare(uint8_t* CardID, uint8_t* CompareID) {
 8001ffe:	b480      	push	{r7}
 8002000:	b085      	sub	sp, #20
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
 8002006:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 5; i++) {
 8002008:	2300      	movs	r3, #0
 800200a:	73fb      	strb	r3, [r7, #15]
 800200c:	e00e      	b.n	800202c <MFRC522_Compare+0x2e>
		if (CardID[i] != CompareID[i]) return MI_ERR;
 800200e:	7bfb      	ldrb	r3, [r7, #15]
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	4413      	add	r3, r2
 8002014:	781a      	ldrb	r2, [r3, #0]
 8002016:	7bfb      	ldrb	r3, [r7, #15]
 8002018:	6839      	ldr	r1, [r7, #0]
 800201a:	440b      	add	r3, r1
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	429a      	cmp	r2, r3
 8002020:	d001      	beq.n	8002026 <MFRC522_Compare+0x28>
 8002022:	2302      	movs	r3, #2
 8002024:	e006      	b.n	8002034 <MFRC522_Compare+0x36>
	for (i = 0; i < 5; i++) {
 8002026:	7bfb      	ldrb	r3, [r7, #15]
 8002028:	3301      	adds	r3, #1
 800202a:	73fb      	strb	r3, [r7, #15]
 800202c:	7bfb      	ldrb	r3, [r7, #15]
 800202e:	2b04      	cmp	r3, #4
 8002030:	d9ed      	bls.n	800200e <MFRC522_Compare+0x10>
	}
	return MI_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	3714      	adds	r7, #20
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <MFRC522_SetBitMask>:

void MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	4603      	mov	r3, r0
 8002048:	460a      	mov	r2, r1
 800204a:	71fb      	strb	r3, [r7, #7]
 800204c:	4613      	mov	r3, r2
 800204e:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) | mask);
 8002050:	79fb      	ldrb	r3, [r7, #7]
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff ffa0 	bl	8001f98 <MFRC522_ReadRegister>
 8002058:	4603      	mov	r3, r0
 800205a:	461a      	mov	r2, r3
 800205c:	79bb      	ldrb	r3, [r7, #6]
 800205e:	4313      	orrs	r3, r2
 8002060:	b2da      	uxtb	r2, r3
 8002062:	79fb      	ldrb	r3, [r7, #7]
 8002064:	4611      	mov	r1, r2
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff ff7e 	bl	8001f68 <MFRC522_WriteRegister>
}
 800206c:	bf00      	nop
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <MFRC522_ClearBitMask>:

void MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	460a      	mov	r2, r1
 800207e:	71fb      	strb	r3, [r7, #7]
 8002080:	4613      	mov	r3, r2
 8002082:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) & (~mask));
 8002084:	79fb      	ldrb	r3, [r7, #7]
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff ff86 	bl	8001f98 <MFRC522_ReadRegister>
 800208c:	4603      	mov	r3, r0
 800208e:	b25a      	sxtb	r2, r3
 8002090:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002094:	43db      	mvns	r3, r3
 8002096:	b25b      	sxtb	r3, r3
 8002098:	4013      	ands	r3, r2
 800209a:	b25b      	sxtb	r3, r3
 800209c:	b2da      	uxtb	r2, r3
 800209e:	79fb      	ldrb	r3, [r7, #7]
 80020a0:	4611      	mov	r1, r2
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff ff60 	bl	8001f68 <MFRC522_WriteRegister>
}
 80020a8:	bf00      	nop
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <MFRC522_Request>:

uint8_t MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af02      	add	r7, sp, #8
 80020b6:	4603      	mov	r3, r0
 80020b8:	6039      	str	r1, [r7, #0]
 80020ba:	71fb      	strb	r3, [r7, #7]
	uint8_t status;
	uint16_t backBits;																			// The received data bits

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		// TxLastBists = BitFramingReg[2..0]
 80020bc:	2107      	movs	r1, #7
 80020be:	200d      	movs	r0, #13
 80020c0:	f7ff ff52 	bl	8001f68 <MFRC522_WriteRegister>
	TagType[0] = reqMode;
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	79fa      	ldrb	r2, [r7, #7]
 80020c8:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 80020ca:	f107 030c 	add.w	r3, r7, #12
 80020ce:	9300      	str	r3, [sp, #0]
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	2201      	movs	r2, #1
 80020d4:	6839      	ldr	r1, [r7, #0]
 80020d6:	200c      	movs	r0, #12
 80020d8:	f000 f80f 	bl	80020fa <MFRC522_ToCard>
 80020dc:	4603      	mov	r3, r0
 80020de:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) status = MI_ERR;
 80020e0:	7bfb      	ldrb	r3, [r7, #15]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d102      	bne.n	80020ec <MFRC522_Request+0x3c>
 80020e6:	89bb      	ldrh	r3, [r7, #12]
 80020e8:	2b10      	cmp	r3, #16
 80020ea:	d001      	beq.n	80020f0 <MFRC522_Request+0x40>
 80020ec:	2302      	movs	r3, #2
 80020ee:	73fb      	strb	r3, [r7, #15]
	return status;
 80020f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <MFRC522_ToCard>:

uint8_t MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 80020fa:	b590      	push	{r4, r7, lr}
 80020fc:	b087      	sub	sp, #28
 80020fe:	af00      	add	r7, sp, #0
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607b      	str	r3, [r7, #4]
 8002104:	4603      	mov	r3, r0
 8002106:	73fb      	strb	r3, [r7, #15]
 8002108:	4613      	mov	r3, r2
 800210a:	73bb      	strb	r3, [r7, #14]
	uint8_t status = MI_ERR;
 800210c:	2302      	movs	r3, #2
 800210e:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 8002110:	2300      	movs	r3, #0
 8002112:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 8002114:	2300      	movs	r3, #0
 8002116:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 8002118:	7bfb      	ldrb	r3, [r7, #15]
 800211a:	2b0c      	cmp	r3, #12
 800211c:	d007      	beq.n	800212e <MFRC522_ToCard+0x34>
 800211e:	2b0e      	cmp	r3, #14
 8002120:	d000      	beq.n	8002124 <MFRC522_ToCard+0x2a>
			irqEn = 0x77;
			waitIRq = 0x30;
			break;
		}
		default:
		break;
 8002122:	e009      	b.n	8002138 <MFRC522_ToCard+0x3e>
			irqEn = 0x12;
 8002124:	2312      	movs	r3, #18
 8002126:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 8002128:	2310      	movs	r3, #16
 800212a:	757b      	strb	r3, [r7, #21]
			break;
 800212c:	e004      	b.n	8002138 <MFRC522_ToCard+0x3e>
			irqEn = 0x77;
 800212e:	2377      	movs	r3, #119	; 0x77
 8002130:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 8002132:	2330      	movs	r3, #48	; 0x30
 8002134:	757b      	strb	r3, [r7, #21]
			break;
 8002136:	bf00      	nop
	}

	MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 8002138:	7dbb      	ldrb	r3, [r7, #22]
 800213a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800213e:	b2db      	uxtb	r3, r3
 8002140:	4619      	mov	r1, r3
 8002142:	2002      	movs	r0, #2
 8002144:	f7ff ff10 	bl	8001f68 <MFRC522_WriteRegister>
	MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 8002148:	2180      	movs	r1, #128	; 0x80
 800214a:	2004      	movs	r0, #4
 800214c:	f7ff ff92 	bl	8002074 <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 8002150:	2180      	movs	r1, #128	; 0x80
 8002152:	200a      	movs	r0, #10
 8002154:	f7ff ff74 	bl	8002040 <MFRC522_SetBitMask>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 8002158:	2100      	movs	r1, #0
 800215a:	2001      	movs	r0, #1
 800215c:	f7ff ff04 	bl	8001f68 <MFRC522_WriteRegister>

	// Writing data to the FIFO
	for (i = 0; i < sendLen; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 8002160:	2300      	movs	r3, #0
 8002162:	827b      	strh	r3, [r7, #18]
 8002164:	e00a      	b.n	800217c <MFRC522_ToCard+0x82>
 8002166:	8a7b      	ldrh	r3, [r7, #18]
 8002168:	68ba      	ldr	r2, [r7, #8]
 800216a:	4413      	add	r3, r2
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	4619      	mov	r1, r3
 8002170:	2009      	movs	r0, #9
 8002172:	f7ff fef9 	bl	8001f68 <MFRC522_WriteRegister>
 8002176:	8a7b      	ldrh	r3, [r7, #18]
 8002178:	3301      	adds	r3, #1
 800217a:	827b      	strh	r3, [r7, #18]
 800217c:	7bbb      	ldrb	r3, [r7, #14]
 800217e:	b29b      	uxth	r3, r3
 8002180:	8a7a      	ldrh	r2, [r7, #18]
 8002182:	429a      	cmp	r2, r3
 8002184:	d3ef      	bcc.n	8002166 <MFRC522_ToCard+0x6c>

	// Execute the command
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 8002186:	7bfb      	ldrb	r3, [r7, #15]
 8002188:	4619      	mov	r1, r3
 800218a:	2001      	movs	r0, #1
 800218c:	f7ff feec 	bl	8001f68 <MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		// StartSend=1,transmission of data starts
 8002190:	7bfb      	ldrb	r3, [r7, #15]
 8002192:	2b0c      	cmp	r3, #12
 8002194:	d103      	bne.n	800219e <MFRC522_ToCard+0xa4>
 8002196:	2180      	movs	r1, #128	; 0x80
 8002198:	200d      	movs	r0, #13
 800219a:	f7ff ff51 	bl	8002040 <MFRC522_SetBitMask>

	// Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 800219e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80021a2:	827b      	strh	r3, [r7, #18]
	do {
		// CommIrqReg[7..0]
		// Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 80021a4:	2004      	movs	r0, #4
 80021a6:	f7ff fef7 	bl	8001f98 <MFRC522_ReadRegister>
 80021aa:	4603      	mov	r3, r0
 80021ac:	753b      	strb	r3, [r7, #20]
		i--;
 80021ae:	8a7b      	ldrh	r3, [r7, #18]
 80021b0:	3b01      	subs	r3, #1
 80021b2:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 80021b4:	8a7b      	ldrh	r3, [r7, #18]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d00a      	beq.n	80021d0 <MFRC522_ToCard+0xd6>
 80021ba:	7d3b      	ldrb	r3, [r7, #20]
 80021bc:	f003 0301 	and.w	r3, r3, #1
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d105      	bne.n	80021d0 <MFRC522_ToCard+0xd6>
 80021c4:	7d3a      	ldrb	r2, [r7, #20]
 80021c6:	7d7b      	ldrb	r3, [r7, #21]
 80021c8:	4013      	ands	r3, r2
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d0e9      	beq.n	80021a4 <MFRC522_ToCard+0xaa>

	MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);																// StartSend=0
 80021d0:	2180      	movs	r1, #128	; 0x80
 80021d2:	200d      	movs	r0, #13
 80021d4:	f7ff ff4e 	bl	8002074 <MFRC522_ClearBitMask>

	if (i != 0)  {
 80021d8:	8a7b      	ldrh	r3, [r7, #18]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d057      	beq.n	800228e <MFRC522_ToCard+0x194>
		if (!(MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 80021de:	2006      	movs	r0, #6
 80021e0:	f7ff feda 	bl	8001f98 <MFRC522_ReadRegister>
 80021e4:	4603      	mov	r3, r0
 80021e6:	f003 031b 	and.w	r3, r3, #27
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d14d      	bne.n	800228a <MFRC522_ToCard+0x190>
			status = MI_OK;
 80021ee:	2300      	movs	r3, #0
 80021f0:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) status = MI_NOTAGERR;
 80021f2:	7d3a      	ldrb	r2, [r7, #20]
 80021f4:	7dbb      	ldrb	r3, [r7, #22]
 80021f6:	4013      	ands	r3, r2
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <MFRC522_ToCard+0x10c>
 8002202:	2301      	movs	r3, #1
 8002204:	75fb      	strb	r3, [r7, #23]
			if (command == PCD_TRANSCEIVE) {
 8002206:	7bfb      	ldrb	r3, [r7, #15]
 8002208:	2b0c      	cmp	r3, #12
 800220a:	d140      	bne.n	800228e <MFRC522_ToCard+0x194>
				n = MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 800220c:	200a      	movs	r0, #10
 800220e:	f7ff fec3 	bl	8001f98 <MFRC522_ReadRegister>
 8002212:	4603      	mov	r3, r0
 8002214:	753b      	strb	r3, [r7, #20]
				lastBits = MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 8002216:	200c      	movs	r0, #12
 8002218:	f7ff febe 	bl	8001f98 <MFRC522_ReadRegister>
 800221c:	4603      	mov	r3, r0
 800221e:	f003 0307 	and.w	r3, r3, #7
 8002222:	747b      	strb	r3, [r7, #17]
				if (lastBits) *backLen = (n-1)*8+lastBits; else *backLen = n*8;
 8002224:	7c7b      	ldrb	r3, [r7, #17]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00b      	beq.n	8002242 <MFRC522_ToCard+0x148>
 800222a:	7d3b      	ldrb	r3, [r7, #20]
 800222c:	3b01      	subs	r3, #1
 800222e:	b29b      	uxth	r3, r3
 8002230:	00db      	lsls	r3, r3, #3
 8002232:	b29a      	uxth	r2, r3
 8002234:	7c7b      	ldrb	r3, [r7, #17]
 8002236:	b29b      	uxth	r3, r3
 8002238:	4413      	add	r3, r2
 800223a:	b29a      	uxth	r2, r3
 800223c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800223e:	801a      	strh	r2, [r3, #0]
 8002240:	e005      	b.n	800224e <MFRC522_ToCard+0x154>
 8002242:	7d3b      	ldrb	r3, [r7, #20]
 8002244:	b29b      	uxth	r3, r3
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	b29a      	uxth	r2, r3
 800224a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800224c:	801a      	strh	r2, [r3, #0]
				if (n == 0) n = 1;
 800224e:	7d3b      	ldrb	r3, [r7, #20]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d101      	bne.n	8002258 <MFRC522_ToCard+0x15e>
 8002254:	2301      	movs	r3, #1
 8002256:	753b      	strb	r3, [r7, #20]
				if (n > MFRC522_MAX_LEN) n = MFRC522_MAX_LEN;
 8002258:	7d3b      	ldrb	r3, [r7, #20]
 800225a:	2b10      	cmp	r3, #16
 800225c:	d901      	bls.n	8002262 <MFRC522_ToCard+0x168>
 800225e:	2310      	movs	r3, #16
 8002260:	753b      	strb	r3, [r7, #20]
				for (i = 0; i < n; i++) backData[i] = MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);		// Reading the received data in FIFO
 8002262:	2300      	movs	r3, #0
 8002264:	827b      	strh	r3, [r7, #18]
 8002266:	e00a      	b.n	800227e <MFRC522_ToCard+0x184>
 8002268:	8a7b      	ldrh	r3, [r7, #18]
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	18d4      	adds	r4, r2, r3
 800226e:	2009      	movs	r0, #9
 8002270:	f7ff fe92 	bl	8001f98 <MFRC522_ReadRegister>
 8002274:	4603      	mov	r3, r0
 8002276:	7023      	strb	r3, [r4, #0]
 8002278:	8a7b      	ldrh	r3, [r7, #18]
 800227a:	3301      	adds	r3, #1
 800227c:	827b      	strh	r3, [r7, #18]
 800227e:	7d3b      	ldrb	r3, [r7, #20]
 8002280:	b29b      	uxth	r3, r3
 8002282:	8a7a      	ldrh	r2, [r7, #18]
 8002284:	429a      	cmp	r2, r3
 8002286:	d3ef      	bcc.n	8002268 <MFRC522_ToCard+0x16e>
 8002288:	e001      	b.n	800228e <MFRC522_ToCard+0x194>
			}
		} else status = MI_ERR;
 800228a:	2302      	movs	r3, #2
 800228c:	75fb      	strb	r3, [r7, #23]
	}
	return status;
 800228e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002290:	4618      	mov	r0, r3
 8002292:	371c      	adds	r7, #28
 8002294:	46bd      	mov	sp, r7
 8002296:	bd90      	pop	{r4, r7, pc}

08002298 <MFRC522_Anticoll>:

uint8_t MFRC522_Anticoll(uint8_t* serNum) {
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af02      	add	r7, sp, #8
 800229e:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 80022a0:	2300      	movs	r3, #0
 80022a2:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);												// TxLastBists = BitFramingReg[2..0]
 80022a4:	2100      	movs	r1, #0
 80022a6:	200d      	movs	r0, #13
 80022a8:	f7ff fe5e 	bl	8001f68 <MFRC522_WriteRegister>
	serNum[0] = PICC_ANTICOLL;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2293      	movs	r2, #147	; 0x93
 80022b0:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	3301      	adds	r3, #1
 80022b6:	2220      	movs	r2, #32
 80022b8:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 80022ba:	f107 030a 	add.w	r3, r7, #10
 80022be:	9300      	str	r3, [sp, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2202      	movs	r2, #2
 80022c4:	6879      	ldr	r1, [r7, #4]
 80022c6:	200c      	movs	r0, #12
 80022c8:	f7ff ff17 	bl	80020fa <MFRC522_ToCard>
 80022cc:	4603      	mov	r3, r0
 80022ce:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) {
 80022d0:	7bfb      	ldrb	r3, [r7, #15]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d118      	bne.n	8002308 <MFRC522_Anticoll+0x70>
		// Check card serial number
		for (i = 0; i < 4; i++) serNumCheck ^= serNum[i];
 80022d6:	2300      	movs	r3, #0
 80022d8:	73bb      	strb	r3, [r7, #14]
 80022da:	e009      	b.n	80022f0 <MFRC522_Anticoll+0x58>
 80022dc:	7bbb      	ldrb	r3, [r7, #14]
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	4413      	add	r3, r2
 80022e2:	781a      	ldrb	r2, [r3, #0]
 80022e4:	7b7b      	ldrb	r3, [r7, #13]
 80022e6:	4053      	eors	r3, r2
 80022e8:	737b      	strb	r3, [r7, #13]
 80022ea:	7bbb      	ldrb	r3, [r7, #14]
 80022ec:	3301      	adds	r3, #1
 80022ee:	73bb      	strb	r3, [r7, #14]
 80022f0:	7bbb      	ldrb	r3, [r7, #14]
 80022f2:	2b03      	cmp	r3, #3
 80022f4:	d9f2      	bls.n	80022dc <MFRC522_Anticoll+0x44>
		if (serNumCheck != serNum[i]) status = MI_ERR;
 80022f6:	7bbb      	ldrb	r3, [r7, #14]
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	4413      	add	r3, r2
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	7b7a      	ldrb	r2, [r7, #13]
 8002300:	429a      	cmp	r2, r3
 8002302:	d001      	beq.n	8002308 <MFRC522_Anticoll+0x70>
 8002304:	2302      	movs	r3, #2
 8002306:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 8002308:	7bfb      	ldrb	r3, [r7, #15]
}
 800230a:	4618      	mov	r0, r3
 800230c:	3710      	adds	r7, #16
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <MFRC522_CalculateCRC>:

void MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 8002312:	b590      	push	{r4, r7, lr}
 8002314:	b087      	sub	sp, #28
 8002316:	af00      	add	r7, sp, #0
 8002318:	60f8      	str	r0, [r7, #12]
 800231a:	460b      	mov	r3, r1
 800231c:	607a      	str	r2, [r7, #4]
 800231e:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);													// CRCIrq = 0
 8002320:	2104      	movs	r1, #4
 8002322:	2005      	movs	r0, #5
 8002324:	f7ff fea6 	bl	8002074 <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);													// Clear the FIFO pointer
 8002328:	2180      	movs	r1, #128	; 0x80
 800232a:	200a      	movs	r0, #10
 800232c:	f7ff fe88 	bl	8002040 <MFRC522_SetBitMask>
	// Write_MFRC522(CommandReg, PCD_IDLE);

	// Writing data to the FIFO
	for (i = 0; i < len; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));
 8002330:	2300      	movs	r3, #0
 8002332:	75fb      	strb	r3, [r7, #23]
 8002334:	e00a      	b.n	800234c <MFRC522_CalculateCRC+0x3a>
 8002336:	7dfb      	ldrb	r3, [r7, #23]
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	4413      	add	r3, r2
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	4619      	mov	r1, r3
 8002340:	2009      	movs	r0, #9
 8002342:	f7ff fe11 	bl	8001f68 <MFRC522_WriteRegister>
 8002346:	7dfb      	ldrb	r3, [r7, #23]
 8002348:	3301      	adds	r3, #1
 800234a:	75fb      	strb	r3, [r7, #23]
 800234c:	7dfa      	ldrb	r2, [r7, #23]
 800234e:	7afb      	ldrb	r3, [r7, #11]
 8002350:	429a      	cmp	r2, r3
 8002352:	d3f0      	bcc.n	8002336 <MFRC522_CalculateCRC+0x24>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 8002354:	2103      	movs	r1, #3
 8002356:	2001      	movs	r0, #1
 8002358:	f7ff fe06 	bl	8001f68 <MFRC522_WriteRegister>

	// Wait CRC calculation is complete
	i = 0xFF;
 800235c:	23ff      	movs	r3, #255	; 0xff
 800235e:	75fb      	strb	r3, [r7, #23]
	do {
		n = MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 8002360:	2005      	movs	r0, #5
 8002362:	f7ff fe19 	bl	8001f98 <MFRC522_ReadRegister>
 8002366:	4603      	mov	r3, r0
 8002368:	75bb      	strb	r3, [r7, #22]
		i--;
 800236a:	7dfb      	ldrb	r3, [r7, #23]
 800236c:	3b01      	subs	r3, #1
 800236e:	75fb      	strb	r3, [r7, #23]
	} while ((i!=0) && !(n&0x04));																						// CRCIrq = 1
 8002370:	7dfb      	ldrb	r3, [r7, #23]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d004      	beq.n	8002380 <MFRC522_CalculateCRC+0x6e>
 8002376:	7dbb      	ldrb	r3, [r7, #22]
 8002378:	f003 0304 	and.w	r3, r3, #4
 800237c:	2b00      	cmp	r3, #0
 800237e:	d0ef      	beq.n	8002360 <MFRC522_CalculateCRC+0x4e>

	// Read CRC calculation result
	pOutData[0] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 8002380:	2022      	movs	r0, #34	; 0x22
 8002382:	f7ff fe09 	bl	8001f98 <MFRC522_ReadRegister>
 8002386:	4603      	mov	r3, r0
 8002388:	461a      	mov	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	701a      	strb	r2, [r3, #0]
	pOutData[1] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	1c5c      	adds	r4, r3, #1
 8002392:	2021      	movs	r0, #33	; 0x21
 8002394:	f7ff fe00 	bl	8001f98 <MFRC522_ReadRegister>
 8002398:	4603      	mov	r3, r0
 800239a:	7023      	strb	r3, [r4, #0]
}
 800239c:	bf00      	nop
 800239e:	371c      	adds	r7, #28
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd90      	pop	{r4, r7, pc}

080023a4 <MFRC522_Init>:
		if ((status != MI_OK) || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A)) status = MI_ERR;
	}
	return status;
}

void MFRC522_Init(void) {
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
	MFRC522_Reset();
 80023a8:	f000 f820 	bl	80023ec <MFRC522_Reset>
	MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 80023ac:	218d      	movs	r1, #141	; 0x8d
 80023ae:	202a      	movs	r0, #42	; 0x2a
 80023b0:	f7ff fdda 	bl	8001f68 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 80023b4:	213e      	movs	r1, #62	; 0x3e
 80023b6:	202b      	movs	r0, #43	; 0x2b
 80023b8:	f7ff fdd6 	bl	8001f68 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);
 80023bc:	211e      	movs	r1, #30
 80023be:	202d      	movs	r0, #45	; 0x2d
 80023c0:	f7ff fdd2 	bl	8001f68 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 80023c4:	2100      	movs	r1, #0
 80023c6:	202c      	movs	r0, #44	; 0x2c
 80023c8:	f7ff fdce 	bl	8001f68 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);				// 48dB gain
 80023cc:	2170      	movs	r1, #112	; 0x70
 80023ce:	2026      	movs	r0, #38	; 0x26
 80023d0:	f7ff fdca 	bl	8001f68 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 80023d4:	2140      	movs	r1, #64	; 0x40
 80023d6:	2015      	movs	r0, #21
 80023d8:	f7ff fdc6 	bl	8001f68 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 80023dc:	213d      	movs	r1, #61	; 0x3d
 80023de:	2011      	movs	r0, #17
 80023e0:	f7ff fdc2 	bl	8001f68 <MFRC522_WriteRegister>
	MFRC522_AntennaOn();																		// Open the antenna
 80023e4:	f000 f80a 	bl	80023fc <MFRC522_AntennaOn>
}
 80023e8:	bf00      	nop
 80023ea:	bd80      	pop	{r7, pc}

080023ec <MFRC522_Reset>:

void MFRC522_Reset(void) {
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 80023f0:	210f      	movs	r1, #15
 80023f2:	2001      	movs	r0, #1
 80023f4:	f7ff fdb8 	bl	8001f68 <MFRC522_WriteRegister>
}
 80023f8:	bf00      	nop
 80023fa:	bd80      	pop	{r7, pc}

080023fc <MFRC522_AntennaOn>:

void MFRC522_AntennaOn(void) {
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 8002402:	2014      	movs	r0, #20
 8002404:	f7ff fdc8 	bl	8001f98 <MFRC522_ReadRegister>
 8002408:	4603      	mov	r3, r0
 800240a:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 800240c:	79fb      	ldrb	r3, [r7, #7]
 800240e:	f003 0303 	and.w	r3, r3, #3
 8002412:	2b00      	cmp	r3, #0
 8002414:	d103      	bne.n	800241e <MFRC522_AntennaOn+0x22>
 8002416:	2103      	movs	r1, #3
 8002418:	2014      	movs	r0, #20
 800241a:	f7ff fe11 	bl	8002040 <MFRC522_SetBitMask>
}
 800241e:	bf00      	nop
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <MFRC522_Halt>:

void MFRC522_AntennaOff(void) {
	MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

void MFRC522_Halt(void) {
 8002426:	b580      	push	{r7, lr}
 8002428:	b084      	sub	sp, #16
 800242a:	af02      	add	r7, sp, #8
	uint16_t unLen;
	uint8_t buff[4];

	buff[0] = PICC_HALT;
 800242c:	2350      	movs	r3, #80	; 0x50
 800242e:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 8002430:	2300      	movs	r3, #0
 8002432:	707b      	strb	r3, [r7, #1]
	MFRC522_CalculateCRC(buff, 2, &buff[2]);
 8002434:	463b      	mov	r3, r7
 8002436:	1c9a      	adds	r2, r3, #2
 8002438:	463b      	mov	r3, r7
 800243a:	2102      	movs	r1, #2
 800243c:	4618      	mov	r0, r3
 800243e:	f7ff ff68 	bl	8002312 <MFRC522_CalculateCRC>
	MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 8002442:	463a      	mov	r2, r7
 8002444:	4639      	mov	r1, r7
 8002446:	1dbb      	adds	r3, r7, #6
 8002448:	9300      	str	r3, [sp, #0]
 800244a:	4613      	mov	r3, r2
 800244c:	2204      	movs	r2, #4
 800244e:	200c      	movs	r0, #12
 8002450:	f7ff fe53 	bl	80020fa <MFRC522_ToCard>
}
 8002454:	bf00      	nop
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002462:	2300      	movs	r3, #0
 8002464:	607b      	str	r3, [r7, #4]
 8002466:	4a10      	ldr	r2, [pc, #64]	; (80024a8 <HAL_MspInit+0x4c>)
 8002468:	4b0f      	ldr	r3, [pc, #60]	; (80024a8 <HAL_MspInit+0x4c>)
 800246a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002470:	6453      	str	r3, [r2, #68]	; 0x44
 8002472:	4b0d      	ldr	r3, [pc, #52]	; (80024a8 <HAL_MspInit+0x4c>)
 8002474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002476:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800247a:	607b      	str	r3, [r7, #4]
 800247c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800247e:	2300      	movs	r3, #0
 8002480:	603b      	str	r3, [r7, #0]
 8002482:	4a09      	ldr	r2, [pc, #36]	; (80024a8 <HAL_MspInit+0x4c>)
 8002484:	4b08      	ldr	r3, [pc, #32]	; (80024a8 <HAL_MspInit+0x4c>)
 8002486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800248c:	6413      	str	r3, [r2, #64]	; 0x40
 800248e:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <HAL_MspInit+0x4c>)
 8002490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002496:	603b      	str	r3, [r7, #0]
 8002498:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	40023800 	.word	0x40023800

080024ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b08a      	sub	sp, #40	; 0x28
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b4:	f107 0314 	add.w	r3, r7, #20
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	605a      	str	r2, [r3, #4]
 80024be:	609a      	str	r2, [r3, #8]
 80024c0:	60da      	str	r2, [r3, #12]
 80024c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a19      	ldr	r2, [pc, #100]	; (8002530 <HAL_SPI_MspInit+0x84>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d12b      	bne.n	8002526 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80024ce:	2300      	movs	r3, #0
 80024d0:	613b      	str	r3, [r7, #16]
 80024d2:	4a18      	ldr	r2, [pc, #96]	; (8002534 <HAL_SPI_MspInit+0x88>)
 80024d4:	4b17      	ldr	r3, [pc, #92]	; (8002534 <HAL_SPI_MspInit+0x88>)
 80024d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80024dc:	6453      	str	r3, [r2, #68]	; 0x44
 80024de:	4b15      	ldr	r3, [pc, #84]	; (8002534 <HAL_SPI_MspInit+0x88>)
 80024e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024e6:	613b      	str	r3, [r7, #16]
 80024e8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ea:	2300      	movs	r3, #0
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	4a11      	ldr	r2, [pc, #68]	; (8002534 <HAL_SPI_MspInit+0x88>)
 80024f0:	4b10      	ldr	r3, [pc, #64]	; (8002534 <HAL_SPI_MspInit+0x88>)
 80024f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f4:	f043 0302 	orr.w	r3, r3, #2
 80024f8:	6313      	str	r3, [r2, #48]	; 0x30
 80024fa:	4b0e      	ldr	r3, [pc, #56]	; (8002534 <HAL_SPI_MspInit+0x88>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	60fb      	str	r3, [r7, #12]
 8002504:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002506:	2338      	movs	r3, #56	; 0x38
 8002508:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800250a:	2302      	movs	r3, #2
 800250c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250e:	2300      	movs	r3, #0
 8002510:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002512:	2303      	movs	r3, #3
 8002514:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002516:	2305      	movs	r3, #5
 8002518:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800251a:	f107 0314 	add.w	r3, r7, #20
 800251e:	4619      	mov	r1, r3
 8002520:	4805      	ldr	r0, [pc, #20]	; (8002538 <HAL_SPI_MspInit+0x8c>)
 8002522:	f7fe f963 	bl	80007ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002526:	bf00      	nop
 8002528:	3728      	adds	r7, #40	; 0x28
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	40013000 	.word	0x40013000
 8002534:	40023800 	.word	0x40023800
 8002538:	40020400 	.word	0x40020400

0800253c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002540:	bf00      	nop
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr

0800254a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800254a:	b480      	push	{r7}
 800254c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800254e:	e7fe      	b.n	800254e <HardFault_Handler+0x4>

08002550 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002554:	e7fe      	b.n	8002554 <MemManage_Handler+0x4>

08002556 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002556:	b480      	push	{r7}
 8002558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800255a:	e7fe      	b.n	800255a <BusFault_Handler+0x4>

0800255c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002560:	e7fe      	b.n	8002560 <UsageFault_Handler+0x4>

08002562 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002562:	b480      	push	{r7}
 8002564:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002566:	bf00      	nop
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002574:	bf00      	nop
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800257e:	b480      	push	{r7}
 8002580:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002582:	bf00      	nop
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002590:	f7fe f806 	bl	80005a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002594:	bf00      	nop
 8002596:	bd80      	pop	{r7, pc}

08002598 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800259c:	4a08      	ldr	r2, [pc, #32]	; (80025c0 <SystemInit+0x28>)
 800259e:	4b08      	ldr	r3, [pc, #32]	; (80025c0 <SystemInit+0x28>)
 80025a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80025ac:	4b04      	ldr	r3, [pc, #16]	; (80025c0 <SystemInit+0x28>)
 80025ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025b2:	609a      	str	r2, [r3, #8]
#endif
}
 80025b4:	bf00      	nop
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	e000ed00 	.word	0xe000ed00

080025c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80025c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025fc <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80025c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80025ca:	e003      	b.n	80025d4 <LoopCopyDataInit>

080025cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80025cc:	4b0c      	ldr	r3, [pc, #48]	; (8002600 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80025ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80025d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80025d2:	3104      	adds	r1, #4

080025d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80025d4:	480b      	ldr	r0, [pc, #44]	; (8002604 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80025d6:	4b0c      	ldr	r3, [pc, #48]	; (8002608 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80025d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80025da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80025dc:	d3f6      	bcc.n	80025cc <CopyDataInit>
  ldr  r2, =_sbss
 80025de:	4a0b      	ldr	r2, [pc, #44]	; (800260c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80025e0:	e002      	b.n	80025e8 <LoopFillZerobss>

080025e2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80025e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80025e4:	f842 3b04 	str.w	r3, [r2], #4

080025e8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80025e8:	4b09      	ldr	r3, [pc, #36]	; (8002610 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80025ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80025ec:	d3f9      	bcc.n	80025e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80025ee:	f7ff ffd3 	bl	8002598 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025f2:	f000 f811 	bl	8002618 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025f6:	f7ff fa9d 	bl	8001b34 <main>
  bx  lr    
 80025fa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80025fc:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002600:	080026a8 	.word	0x080026a8
  ldr  r0, =_sdata
 8002604:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002608:	2000002c 	.word	0x2000002c
  ldr  r2, =_sbss
 800260c:	2000002c 	.word	0x2000002c
  ldr  r3, = _ebss
 8002610:	200000ac 	.word	0x200000ac

08002614 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002614:	e7fe      	b.n	8002614 <ADC_IRQHandler>
	...

08002618 <__libc_init_array>:
 8002618:	b570      	push	{r4, r5, r6, lr}
 800261a:	4e0d      	ldr	r6, [pc, #52]	; (8002650 <__libc_init_array+0x38>)
 800261c:	4c0d      	ldr	r4, [pc, #52]	; (8002654 <__libc_init_array+0x3c>)
 800261e:	1ba4      	subs	r4, r4, r6
 8002620:	10a4      	asrs	r4, r4, #2
 8002622:	2500      	movs	r5, #0
 8002624:	42a5      	cmp	r5, r4
 8002626:	d109      	bne.n	800263c <__libc_init_array+0x24>
 8002628:	4e0b      	ldr	r6, [pc, #44]	; (8002658 <__libc_init_array+0x40>)
 800262a:	4c0c      	ldr	r4, [pc, #48]	; (800265c <__libc_init_array+0x44>)
 800262c:	f000 f820 	bl	8002670 <_init>
 8002630:	1ba4      	subs	r4, r4, r6
 8002632:	10a4      	asrs	r4, r4, #2
 8002634:	2500      	movs	r5, #0
 8002636:	42a5      	cmp	r5, r4
 8002638:	d105      	bne.n	8002646 <__libc_init_array+0x2e>
 800263a:	bd70      	pop	{r4, r5, r6, pc}
 800263c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002640:	4798      	blx	r3
 8002642:	3501      	adds	r5, #1
 8002644:	e7ee      	b.n	8002624 <__libc_init_array+0xc>
 8002646:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800264a:	4798      	blx	r3
 800264c:	3501      	adds	r5, #1
 800264e:	e7f2      	b.n	8002636 <__libc_init_array+0x1e>
 8002650:	080026a0 	.word	0x080026a0
 8002654:	080026a0 	.word	0x080026a0
 8002658:	080026a0 	.word	0x080026a0
 800265c:	080026a4 	.word	0x080026a4

08002660 <memset>:
 8002660:	4402      	add	r2, r0
 8002662:	4603      	mov	r3, r0
 8002664:	4293      	cmp	r3, r2
 8002666:	d100      	bne.n	800266a <memset+0xa>
 8002668:	4770      	bx	lr
 800266a:	f803 1b01 	strb.w	r1, [r3], #1
 800266e:	e7f9      	b.n	8002664 <memset+0x4>

08002670 <_init>:
 8002670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002672:	bf00      	nop
 8002674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002676:	bc08      	pop	{r3}
 8002678:	469e      	mov	lr, r3
 800267a:	4770      	bx	lr

0800267c <_fini>:
 800267c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800267e:	bf00      	nop
 8002680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002682:	bc08      	pop	{r3}
 8002684:	469e      	mov	lr, r3
 8002686:	4770      	bx	lr
